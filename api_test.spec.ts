/**
 * Portal
 * Portal Endpoints
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("CategoryEndpointsApi", () => {
  let instance: api.CategoryEndpointsApi
  beforeEach(function() {
    instance = new api.CategoryEndpointsApi(config)
  });

  test("addCategoryToCompany", () => {
    const body: api.CategoryCompanyBody = undefined
    return expect(instance.addCategoryToCompany(body, {})).resolves.toBe(null)
  })
  test("createAircraftType", () => {
    const body: api.CategoryAircraftBody1 = undefined
    return expect(instance.createAircraftType(body, {})).resolves.toBe(null)
  })
  test("createBct", () => {
    const body: api.CategoryBctBody1 = undefined
    return expect(instance.createBct(body, {})).resolves.toBe(null)
  })
  test("createCategory", () => {
    const body: api.CategoryBody1 = undefined
    return expect(instance.createCategory(body, {})).resolves.toBe(null)
  })
  test("createMarket", () => {
    const body: api.CategoryMarketBody1 = undefined
    return expect(instance.createMarket(body, {})).resolves.toBe(null)
  })
  test("deleteAircraftType", () => {
    const aircraft: string = "aircraft_example"
    const body: api.Jwt = undefined
    return expect(instance.deleteAircraftType(aircraft, body, {})).resolves.toBe(null)
  })
  test("deleteBct", () => {
    const bct: string = "bct_example"
    const body: api.Jwt = undefined
    return expect(instance.deleteBct(bct, body, {})).resolves.toBe(null)
  })
  test("deleteCategory", () => {
    const embCategoryId: string = "embCategoryId_example"
    const body: api.Jwt = undefined
    return expect(instance.deleteCategory(embCategoryId, body, {})).resolves.toBe(null)
  })
  test("deleteMarket", () => {
    const market: string = "market_example"
    const body: api.Jwt = undefined
    return expect(instance.deleteMarket(market, body, {})).resolves.toBe(null)
  })
  test("getAllAircraftTypes", () => {
    return expect(instance.getAllAircraftTypes({})).resolves.toBe(null)
  })
  test("getAllBcts", () => {
    return expect(instance.getAllBcts({})).resolves.toBe(null)
  })
  test("getAllCategories", () => {
    return expect(instance.getAllCategories({})).resolves.toBe(null)
  })
  test("getAllMarkets", () => {
    return expect(instance.getAllMarkets({})).resolves.toBe(null)
  })
  test("getCategoriesFromCompany", () => {
    const embCompanyCode: string = "embCompanyCode_example"
    return expect(instance.getCategoriesFromCompany(embCompanyCode, {})).resolves.toBe(null)
  })
  test("getCategory", () => {
    const categoryId: string = "categoryId_example"
    return expect(instance.getCategory(categoryId, {})).resolves.toBe(null)
  })
  test("getMarketsAndAircraftByBctAndMarket", () => {
    const bct: string = "bct_example"
    const market: string = "market_example"
    return expect(instance.getMarketsAndAircraftByBctAndMarket(bct, market, {})).resolves.toBe(null)
  })
  test("removeCategoryToCompany", () => {
    const body: api.CategoryCompanyBody1 = undefined
    return expect(instance.removeCategoryToCompany(body, {})).resolves.toBe(null)
  })
  test("updateAircraftType", () => {
    const body: api.CategoryAircraftBody = undefined
    return expect(instance.updateAircraftType(body, {})).resolves.toBe(null)
  })
  test("updateBct", () => {
    const body: api.CategoryBctBody = undefined
    return expect(instance.updateBct(body, {})).resolves.toBe(null)
  })
  test("updateCategory", () => {
    const body: api.CategoryBody = undefined
    return expect(instance.updateCategory(body, {})).resolves.toBe(null)
  })
  test("updateMarket", () => {
    const body: api.CategoryMarketBody = undefined
    return expect(instance.updateMarket(body, {})).resolves.toBe(null)
  })
})

describe("CepEndpointsApi", () => {
  let instance: api.CepEndpointsApi
  beforeEach(function() {
    instance = new api.CepEndpointsApi(config)
  });

  test("getCountries", () => {
    return expect(instance.getCountries({})).resolves.toBe(null)
  })
  test("getDdis", () => {
    return expect(instance.getDdis({})).resolves.toBe(null)
  })
})

describe("CompanyEndpointsApi", () => {
  let instance: api.CompanyEndpointsApi
  beforeEach(function() {
    instance = new api.CompanyEndpointsApi(config)
  });

  test("createCompany", () => {
    const body: api.CompanyDTO = undefined
    return expect(instance.createCompany(body, {})).resolves.toBe(null)
  })
  test("getCompaniesByApplication", () => {
    const embCompanyResource: string = "embCompanyResource_example"
    return expect(instance.getCompaniesByApplication(embCompanyResource, {})).resolves.toBe(null)
  })
  test("getCompaniesByName", () => {
    const displayName: string = "displayName_example"
    return expect(instance.getCompaniesByName(displayName, {})).resolves.toBe(null)
  })
  test("getCompaniesByObject", () => {
    const embCompanyCode: string = "embCompanyCode_example"
    const displayName: string = "displayName_example"
    const embStatus: string = "embStatus_example"
    const streetAddress: string = "streetAddress_example"
    const location: string = "location_example"
    const country: string = "country_example"
    const postalCode: string = "postalCode_example"
    const applicationDm: string = "applicationDm_example"
    const serviceDn: string = "serviceDn_example"
    const bct: string = "bct_example"
    const market: string = "market_example"
    const aircraftType: string = "aircraftType_example"
    const adminDisplayName: string = "adminDisplayName_example"
    const adminEmbStatus: string = "adminEmbStatus_example"
    const adminEmail: string = "adminEmail_example"
    const adminEmail2: string = "adminEmail2_example"
    const adminTelephoneNumber: string = "adminTelephoneNumber_example"
    const adminExtensionTelephone: string = "adminExtensionTelephone_example"
    const approvalName: string = "approvalName_example"
    const approvalDate: Date = 2013-10-20T19:20:30+01:00
    const creationDate: Date = 2013-10-20T19:20:30+01:00
    const lastDateStatus: Date = 2013-10-20T19:20:30+01:00
    return expect(instance.getCompaniesByObject(embCompanyCode, displayName, embStatus, streetAddress, location, country, postalCode, applicationDm, serviceDn, bct, market, aircraftType, adminDisplayName, adminEmbStatus, adminEmail, adminEmail2, adminTelephoneNumber, adminExtensionTelephone, approvalName, approvalDate, creationDate, lastDateStatus, {})).resolves.toBe(null)
  })
  test("getCompany", () => {
    const embCompanyCode: string = "embCompanyCode_example"
    return expect(instance.getCompany(embCompanyCode, {})).resolves.toBe(null)
  })
  test("getCompanyAdminFromCompany", () => {
    const embCompanyCode: string = "embCompanyCode_example"
    return expect(instance.getCompanyAdminFromCompany(embCompanyCode, {})).resolves.toBe(null)
  })
  test("getCompanyFromUser", () => {
    const username: string = "username_example"
    return expect(instance.getCompanyFromUser(username, {})).resolves.toBe(null)
  })
  test("updateCompany", () => {
    const body: api.CompanyBody = undefined
    return expect(instance.updateCompany(body, {})).resolves.toBe(null)
  })
})

describe("ContactUsEndpointsApi", () => {
  let instance: api.ContactUsEndpointsApi
  beforeEach(function() {
    instance = new api.ContactUsEndpointsApi(config)
  });

  test("contactUs", () => {
    const payload: api.ContactUsPayload = undefined
    return expect(instance.contactUs(payload, {})).resolves.toBe(null)
  })
})

describe("ContractEndpointsApi", () => {
  let instance: api.ContractEndpointsApi
  beforeEach(function() {
    instance = new api.ContractEndpointsApi(config)
  });

  test("getFile", () => {
    const filename: string = "filename_example"
    return expect(instance.getFile(filename, {})).resolves.toBe(null)
  })
  test("getListFiles", () => {
    return expect(instance.getListFiles({})).resolves.toBe(null)
  })
  test("uploadDocument", () => {
    const document: Blob = "document_example"
    return expect(instance.uploadDocument(document, {})).resolves.toBe(null)
  })
})

describe("EmailEndpointsApi", () => {
  let instance: api.EmailEndpointsApi
  beforeEach(function() {
    instance = new api.EmailEndpointsApi(config)
  });

  test("getEmailTemplate", () => {
    const templateCode: string = "templateCode_example"
    return expect(instance.getEmailTemplate(templateCode, {})).resolves.toBe(null)
  })
  test("sendMessage", () => {
    const body: api.EmailPayload = undefined
    return expect(instance.sendMessage(body, {})).resolves.toBe(null)
  })
})

describe("ExportEndpointsApi", () => {
  let instance: api.ExportEndpointsApi
  beforeEach(function() {
    instance = new api.ExportEndpointsApi(config)
  });

  test("exportUserRecords", () => {
    const userCn: string = "userCn_example"
    const userDisplayName: string = "userDisplayName_example"
    const userEmbStatus: string = "userEmbStatus_example"
    const userEmbProfile: string = "userEmbProfile_example"
    const userMail: string = "userMail_example"
    const userMail2: string = "userMail2_example"
    const userTelephoneNumber: string = "userTelephoneNumber_example"
    const userExtensionTelephoneNumber: string = "userExtensionTelephoneNumber_example"
    const userSecondaryPhone: string = "userSecondaryPhone_example"
    const applicationDn: string = "applicationDn_example"
    const serviceDn: string = "serviceDn_example"
    const companyDisplayName: string = "companyDisplayName_example"
    const companyEmbStatus: string = "companyEmbStatus_example"
    const companyAddress: string = "companyAddress_example"
    const companyCountry: string = "companyCountry_example"
    const companyLocation: string = "companyLocation_example"
    const userEmbApprovalName: string = "userEmbApprovalName_example"
    const userEmbApprovalDate: Date = 2013-10-20T19:20:30+01:00
    const creationDate: Date = 2013-10-20T19:20:30+01:00
    const lastUpdateDate: Date = 2013-10-20T19:20:30+01:00
    const bct: string = "bct_example"
    const market: string = "market_example"
    const aircraftType: string = "aircraftType_example"
    return expect(instance.exportUserRecords(userCn, userDisplayName, userEmbStatus, userEmbProfile, userMail, userMail2, userTelephoneNumber, userExtensionTelephoneNumber, userSecondaryPhone, applicationDn, serviceDn, companyDisplayName, companyEmbStatus, companyAddress, companyCountry, companyLocation, userEmbApprovalName, userEmbApprovalDate, creationDate, lastUpdateDate, bct, market, aircraftType, {})).resolves.toBe(null)
  })
  test("getReportCompaniesByObject", () => {
    const embCompanyCode: string = "embCompanyCode_example"
    const displayName: string = "displayName_example"
    const embStatus: string = "embStatus_example"
    const streetAddress: string = "streetAddress_example"
    const location: string = "location_example"
    const country: string = "country_example"
    const postalCode: string = "postalCode_example"
    const applicationDm: string = "applicationDm_example"
    const serviceDn: string = "serviceDn_example"
    const bct: string = "bct_example"
    const market: string = "market_example"
    const aircraftType: string = "aircraftType_example"
    const adminDisplayName: string = "adminDisplayName_example"
    const adminEmbStatus: string = "adminEmbStatus_example"
    const adminEmail: string = "adminEmail_example"
    const adminEmail2: string = "adminEmail2_example"
    const adminTelephoneNumber: string = "adminTelephoneNumber_example"
    const adminExtensionTelephone: string = "adminExtensionTelephone_example"
    const approvalName: string = "approvalName_example"
    const approvalDate: Date = 2013-10-20T19:20:30+01:00
    const creationDate: Date = 2013-10-20T19:20:30+01:00
    const lastDateStatus: Date = 2013-10-20T19:20:30+01:00
    return expect(instance.getReportCompaniesByObject(embCompanyCode, displayName, embStatus, streetAddress, location, country, postalCode, applicationDm, serviceDn, bct, market, aircraftType, adminDisplayName, adminEmbStatus, adminEmail, adminEmail2, adminTelephoneNumber, adminExtensionTelephone, approvalName, approvalDate, creationDate, lastDateStatus, {})).resolves.toBe(null)
  })
})

describe("ImpersonateEndpointsApi", () => {
  let instance: api.ImpersonateEndpointsApi
  beforeEach(function() {
    instance = new api.ImpersonateEndpointsApi(config)
  });

  test("getUsersToImpersonate", () => {
    const displayName: string = "displayName_example"
    const email: string = "email_example"
    const companyName: string = "companyName_example"
    return expect(instance.getUsersToImpersonate(displayName, email, companyName, {})).resolves.toBe(null)
  })
  test("impersonate", () => {
    const body: api.ImpersonateBody = undefined
    return expect(instance.impersonate(body, {})).resolves.toBe(null)
  })
})

describe("JobFunctionEndpointsApi", () => {
  let instance: api.JobFunctionEndpointsApi
  beforeEach(function() {
    instance = new api.JobFunctionEndpointsApi(config)
  });

  test("addAndRemoveServiceToUser", () => {
    const body: api.UserServiceAddRemovePayload = undefined
    return expect(instance.addAndRemoveServiceToUser(body, {})).resolves.toBe(null)
  })
  test("addApplicationToCompany", () => {
    const body: api.CompanyApplicationPayload = undefined
    return expect(instance.addApplicationToCompany(body, {})).resolves.toBe(null)
  })
  test("addServiceToCategory", () => {
    const body: api.CategoryPayload = undefined
    return expect(instance.addServiceToCategory(body, {})).resolves.toBe(null)
  })
  test("addServiceToCompany", () => {
    const body: api.CompanyServicePayload = undefined
    return expect(instance.addServiceToCompany(body, {})).resolves.toBe(null)
  })
  test("addServiceToUser", () => {
    const body: api.UserServicePayload = undefined
    return expect(instance.addServiceToUser(body, {})).resolves.toBe(null)
  })
  test("associateContentAdminToApplication", () => {
    const body: api.ContentAdminAppPayload = undefined
    return expect(instance.associateContentAdminToApplication(body, {})).resolves.toBe(null)
  })
  test("createService", () => {
    const body: api.ServicePayload = undefined
    return expect(instance.createService(body, {})).resolves.toBe(null)
  })
  test("deleteContentAdminFromApplication", () => {
    const body: api.ContentAdminAppPayload = undefined
    return expect(instance.deleteContentAdminFromApplication(body, {})).resolves.toBe(null)
  })
  test("deleteService", () => {
    const body: api.ServicePayload = undefined
    return expect(instance.deleteService(body, {})).resolves.toBe(null)
  })
  test("getAllApplications", () => {
    return expect(instance.getAllApplications({})).resolves.toBe(null)
  })
  test("getAllGroupAccessApplications", () => {
    return expect(instance.getAllGroupAccessApplications({})).resolves.toBe(null)
  })
  test("getAllServices", () => {
    return expect(instance.getAllServices({})).resolves.toBe(null)
  })
  test("getApplicationsFromCompany", () => {
    const embCompanyCode: string = "embCompanyCode_example"
    return expect(instance.getApplicationsFromCompany(embCompanyCode, {})).resolves.toBe(null)
  })
  test("getApplicationsFromUser", () => {
    const userDn: string = "userDn_example"
    return expect(instance.getApplicationsFromUser(userDn, {})).resolves.toBe(null)
  })
  test("getContentAdminApplications", () => {
    return expect(instance.getContentAdminApplications({})).resolves.toBe(null)
  })
  test("getLinksApplicationsFromUser", () => {
    const jwt: api.Jwt = undefined
    return expect(instance.getLinksApplicationsFromUser(jwt, {})).resolves.toBe(null)
  })
  test("getServicesFromApplication", () => {
    const applicationDn: string = "applicationDn_example"
    return expect(instance.getServicesFromApplication(applicationDn, {})).resolves.toBe(null)
  })
  test("getServicesFromCompany", () => {
    const embCompanyCode: string = "embCompanyCode_example"
    return expect(instance.getServicesFromCompany(embCompanyCode, {})).resolves.toBe(null)
  })
  test("getServicesFromUser", () => {
    const userDn: string = "userDn_example"
    return expect(instance.getServicesFromUser(userDn, {})).resolves.toBe(null)
  })
  test("removeApplicationFromCompany", () => {
    const body: api.CompanyApplicationPayload = undefined
    return expect(instance.removeApplicationFromCompany(body, {})).resolves.toBe(null)
  })
  test("removeServiceFromCategory", () => {
    const body: api.CategoryPayload = undefined
    return expect(instance.removeServiceFromCategory(body, {})).resolves.toBe(null)
  })
  test("removeServiceFromCompany", () => {
    const body: api.CompanyServicePayload = undefined
    return expect(instance.removeServiceFromCompany(body, {})).resolves.toBe(null)
  })
  test("removeServiceFromUser", () => {
    const body: api.UserServicePayload = undefined
    return expect(instance.removeServiceFromUser(body, {})).resolves.toBe(null)
  })
  test("updateService", () => {
    const body: api.ServicePayload = undefined
    return expect(instance.updateService(body, {})).resolves.toBe(null)
  })
})

describe("MenuEndpointsApi", () => {
  let instance: api.MenuEndpointsApi
  beforeEach(function() {
    instance = new api.MenuEndpointsApi(config)
  });

  test("getMenus", () => {
    const username: string = "username_example"
    return expect(instance.getMenus(username, {})).resolves.toBe(null)
  })
})

describe("MessageCenterEndpointsApi", () => {
  let instance: api.MessageCenterEndpointsApi
  beforeEach(function() {
    instance = new api.MessageCenterEndpointsApi(config)
  });

  test("deleteMessage", () => {
    const messageId: number = 789
    return expect(instance.deleteMessage(messageId, {})).resolves.toBe(null)
  })
  test("deleteMessageTemplate", () => {
    const messageTemplateId: number = 789
    return expect(instance.deleteMessageTemplate(messageTemplateId, {})).resolves.toBe(null)
  })
  test("getMessageTemplate", () => {
    const messageTemplateId: number = 789
    return expect(instance.getMessageTemplate(messageTemplateId, {})).resolves.toBe(null)
  })
  test("getUserMessage", () => {
    const messageId: number = 789
    return expect(instance.getUserMessage(messageId, {})).resolves.toBe(null)
  })
  test("listAllMessagesByParameters", () => {
    const pageable: api.Pageable = undefined
    const title: string = "title_example"
    const startDate: Date = 2013-10-20T19:20:30+01:00
    const endDate: Date = 2013-10-20T19:20:30+01:00
    return expect(instance.listAllMessagesByParameters(pageable, title, startDate, endDate, {})).resolves.toBe(null)
  })
  test("listAllMessagesByUser", () => {
    const userCn: string = "userCn_example"
    const pageable: api.Pageable = undefined
    return expect(instance.listAllMessagesByUser(userCn, pageable, {})).resolves.toBe(null)
  })
  test("listMessageTemplates", () => {
    const pageable: api.Pageable = undefined
    const name: string = "name_example"
    const startDate: Date = 2013-10-20T19:20:30+01:00
    const endDate: Date = 2013-10-20T19:20:30+01:00
    return expect(instance.listMessageTemplates(pageable, name, startDate, endDate, {})).resolves.toBe(null)
  })
  test("readUserMessage", () => {
    const messageUserId: number = 789
    return expect(instance.readUserMessage(messageUserId, {})).resolves.toBe(null)
  })
  test("saveMessage", () => {
    const body: api.MessageCenterPayload = undefined
    return expect(instance.saveMessage(body, {})).resolves.toBe(null)
  })
  test("saveMessageTemplate", () => {
    const body: api.MessageTemplateDTO = undefined
    return expect(instance.saveMessageTemplate(body, {})).resolves.toBe(null)
  })
  test("updateMessage", () => {
    const body: api.MessageCenterPayload = undefined
    const messageId: number = 789
    return expect(instance.updateMessage(body, messageId, {})).resolves.toBe(null)
  })
  test("updateMessageTemplate", () => {
    const body: api.MessageTemplateDTO = undefined
    const messageTemplateId: number = 789
    return expect(instance.updateMessageTemplate(body, messageTemplateId, {})).resolves.toBe(null)
  })
})

describe("PageEndpointsApi", () => {
  let instance: api.PageEndpointsApi
  beforeEach(function() {
    instance = new api.PageEndpointsApi(config)
  });

  test("createPage", () => {
    const body: api.PageDTO = undefined
    return expect(instance.createPage(body, {})).resolves.toBe(null)
  })
  test("deletePage", () => {
    const pageId: number = 789
    return expect(instance.deletePage(pageId, {})).resolves.toBe(null)
  })
  test("getAllPages", () => {
    return expect(instance.getAllPages({})).resolves.toBe(null)
  })
  test("getPage", () => {
    const pageId: number = 789
    return expect(instance.getPage(pageId, {})).resolves.toBe(null)
  })
  test("updatePage", () => {
    const body: api.PageDTO = undefined
    const pageId: number = 789
    return expect(instance.updatePage(body, pageId, {})).resolves.toBe(null)
  })
})

describe("PasswordEndpointsApi", () => {
  let instance: api.PasswordEndpointsApi
  beforeEach(function() {
    instance = new api.PasswordEndpointsApi(config)
  });

  test("expireToken", () => {
    const token: string = "token_example"
    return expect(instance.expireToken(token, {})).resolves.toBe(null)
  })
  test("forgotPassword", () => {
    const body: api.PasswordPayload = undefined
    return expect(instance.forgotPassword(body, {})).resolves.toBe(null)
  })
  test("getUsersToSetPassword", () => {
    const payload: api.PasswordPayload = undefined
    return expect(instance.getUsersToSetPassword(payload, {})).resolves.toBe(null)
  })
  test("setUserPassword", () => {
    const body: api.PasswordPayload = undefined
    return expect(instance.setUserPassword(body, {})).resolves.toBe(null)
  })
  test("verifyToken", () => {
    const token: string = "token_example"
    return expect(instance.verifyToken(token, {})).resolves.toBe(null)
  })
})

describe("PortalControllerApi", () => {
  let instance: api.PortalControllerApi
  beforeEach(function() {
    instance = new api.PortalControllerApi(config)
  });

  test("login", () => {
    return expect(instance.login({})).resolves.toBe(null)
  })
})

describe("ProfileEndpointsApi", () => {
  let instance: api.ProfileEndpointsApi
  beforeEach(function() {
    instance = new api.ProfileEndpointsApi(config)
  });

  test("getProfile", () => {
    const jwt: api.Jwt = undefined
    return expect(instance.getProfile(jwt, {})).resolves.toBe(null)
  })
  test("getProfilesCode", () => {
    return expect(instance.getProfilesCode({})).resolves.toBe(null)
  })
})

describe("UserEndpointsApi", () => {
  let instance: api.UserEndpointsApi
  beforeEach(function() {
    instance = new api.UserEndpointsApi(config)
  });

  test("checkIfUserExists", () => {
    const displayName: string = "displayName_example"
    const username: string = "username_example"
    return expect(instance.checkIfUserExists(displayName, username, {})).resolves.toBe(null)
  })
  test("createUser", () => {
    const body: api.UserDTO = undefined
    return expect(instance.createUser(body, {})).resolves.toBe(null)
  })
  test("generateLogin", () => {
    const fullName: string = "fullName_example"
    return expect(instance.generateLogin(fullName, {})).resolves.toBe(null)
  })
  test("getAllUsers", () => {
    return expect(instance.getAllUsers({})).resolves.toBe(null)
  })
  test("getNickname", () => {
    const jwt: api.Jwt = undefined
    return expect(instance.getNickname(jwt, {})).resolves.toBe(null)
  })
  test("getUser", () => {
    const username: string = "username_example"
    return expect(instance.getUser(username, {})).resolves.toBe(null)
  })
  test("getUsersByAircraft", () => {
    const aircraft: string = "aircraft_example"
    return expect(instance.getUsersByAircraft(aircraft, {})).resolves.toBe(null)
  })
  test("getUsersByBCT", () => {
    const bct: string = "bct_example"
    return expect(instance.getUsersByBCT(bct, {})).resolves.toBe(null)
  })
  test("getUsersByCompany", () => {
    const embCompanyCode: string = "embCompanyCode_example"
    return expect(instance.getUsersByCompany(embCompanyCode, {})).resolves.toBe(null)
  })
  test("getUsersByMarket", () => {
    const market: string = "market_example"
    return expect(instance.getUsersByMarket(market, {})).resolves.toBe(null)
  })
  test("getUsersByName", () => {
    const displayName: string = "displayName_example"
    return expect(instance.getUsersByName(displayName, {})).resolves.toBe(null)
  })
  test("getUsersByObject", () => {
    const userCn: string = "userCn_example"
    const userDisplayName: string = "userDisplayName_example"
    const userEmbStatus: string = "userEmbStatus_example"
    const userEmbProfile: string = "userEmbProfile_example"
    const userMail: string = "userMail_example"
    const userMail2: string = "userMail2_example"
    const userTelephoneNumber: string = "userTelephoneNumber_example"
    const userExtensionTelephoneNumber: string = "userExtensionTelephoneNumber_example"
    const userSecondaryPhone: string = "userSecondaryPhone_example"
    const applicationDn: string = "applicationDn_example"
    const serviceDn: string = "serviceDn_example"
    const companyDisplayName: string = "companyDisplayName_example"
    const companyEmbStatus: string = "companyEmbStatus_example"
    const companyAddress: string = "companyAddress_example"
    const companyCountry: string = "companyCountry_example"
    const companyLocation: string = "companyLocation_example"
    const userEmbApprovalName: string = "userEmbApprovalName_example"
    const userEmbApprovalDate: Date = 2013-10-20T19:20:30+01:00
    const creationDate: Date = 2013-10-20T19:20:30+01:00
    const lastUpdateDate: Date = 2013-10-20T19:20:30+01:00
    const bct: string = "bct_example"
    const market: string = "market_example"
    const aircraftType: string = "aircraftType_example"
    return expect(instance.getUsersByObject(userCn, userDisplayName, userEmbStatus, userEmbProfile, userMail, userMail2, userTelephoneNumber, userExtensionTelephoneNumber, userSecondaryPhone, applicationDn, serviceDn, companyDisplayName, companyEmbStatus, companyAddress, companyCountry, companyLocation, userEmbApprovalName, userEmbApprovalDate, creationDate, lastUpdateDate, bct, market, aircraftType, {})).resolves.toBe(null)
  })
  test("getUsersByService", () => {
    const service: string = "service_example"
    return expect(instance.getUsersByService(service, {})).resolves.toBe(null)
  })
  test("updateUser", () => {
    const body: api.UserBody = undefined
    return expect(instance.updateUser(body, {})).resolves.toBe(null)
  })
})

describe("WorkflowEndpointsApi", () => {
  let instance: api.WorkflowEndpointsApi
  beforeEach(function() {
    instance = new api.WorkflowEndpointsApi(config)
  });

  test("createWorkflow", () => {
    const body: api.WorkflowPayload = undefined
    return expect(instance.createWorkflow(body, {})).resolves.toBe(null)
  })
  test("finishTask", () => {
    const body: api.WorkflowTaskBody = undefined
    return expect(instance.finishTask(body, {})).resolves.toBe(null)
  })
  test("getTasks", () => {
    const workflowId: number = 789
    const applicationDn: string = "applicationDn_example"
    return expect(instance.getTasks(workflowId, applicationDn, {})).resolves.toBe(null)
  })
  test("getWorkflows", () => {
    const pageable: api.Pageable = undefined
    const companyName: string = "companyName_example"
    const companyAdminName: string = "companyAdminName_example"
    const applicationName: string = "applicationName_example"
    const username: string = "username_example"
    const statusTask: string = "statusTask_example"
    const statusWorkflow: string = "statusWorkflow_example"
    const startTask: Date = 2013-10-20T19:20:30+01:00
    const endTask: Date = 2013-10-20T19:20:30+01:00
    const startWorkflow: Date = 2013-10-20T19:20:30+01:00
    const endWorkflow: Date = 2013-10-20T19:20:30+01:00
    return expect(instance.getWorkflows(pageable, companyName, companyAdminName, applicationName, username, statusTask, statusWorkflow, startTask, endTask, startWorkflow, endWorkflow, {})).resolves.toBe(null)
  })
})

