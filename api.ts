/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Portal
 * Portal Endpoints
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://portal.dev.flyembraer.com/api/v1/portal".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AircraftType
 */
export interface AircraftType {
    /**
     * 
     * @type {string}
     * @memberof AircraftType
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof AircraftType
     */
    dn?: string;
    /**
     * 
     * @type {string}
     * @memberof AircraftType
     */
    cn?: string;
    /**
     * 
     * @type {string}
     * @memberof AircraftType
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface Application
 */
export interface Application {
    /**
     * 
     * @type {string}
     * @memberof Application
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof Application
     */
    ouDn?: string;
    /**
     * 
     * @type {string}
     * @memberof Application
     */
    accessDn?: string;
}
/**
 * 
 * @export
 * @interface BusinessCompanyType
 */
export interface BusinessCompanyType {
    /**
     * 
     * @type {string}
     * @memberof BusinessCompanyType
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof BusinessCompanyType
     */
    dn?: string;
    /**
     * 
     * @type {string}
     * @memberof BusinessCompanyType
     */
    cn?: string;
    /**
     * 
     * @type {string}
     * @memberof BusinessCompanyType
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    cn?: string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    embCategoryID?: string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    description?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Category
     */
    embCompanyType?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Category
     */
    embMarket?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Category
     */
    embTypeAirCraft?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Category
     */
    embServices?: Array<string>;
}
/**
 * 
 * @export
 * @interface CategoryAircraftBody
 */
export interface CategoryAircraftBody {
    /**
     * 
     * @type {CategoryPayload}
     * @memberof CategoryAircraftBody
     */
    payload?: CategoryPayload;
    /**
     * 
     * @type {Jwt}
     * @memberof CategoryAircraftBody
     */
    jwt?: Jwt;
}
/**
 * 
 * @export
 * @interface CategoryAircraftBody1
 */
export interface CategoryAircraftBody1 {
    /**
     * 
     * @type {CategoryPayload}
     * @memberof CategoryAircraftBody1
     */
    payload?: CategoryPayload;
    /**
     * 
     * @type {Jwt}
     * @memberof CategoryAircraftBody1
     */
    jwt?: Jwt;
}
/**
 * 
 * @export
 * @interface CategoryBctBody
 */
export interface CategoryBctBody {
    /**
     * 
     * @type {CategoryPayload}
     * @memberof CategoryBctBody
     */
    payload?: CategoryPayload;
    /**
     * 
     * @type {Jwt}
     * @memberof CategoryBctBody
     */
    jwt?: Jwt;
}
/**
 * 
 * @export
 * @interface CategoryBctBody1
 */
export interface CategoryBctBody1 {
    /**
     * 
     * @type {CategoryPayload}
     * @memberof CategoryBctBody1
     */
    payload?: CategoryPayload;
    /**
     * 
     * @type {Jwt}
     * @memberof CategoryBctBody1
     */
    jwt?: Jwt;
}
/**
 * 
 * @export
 * @interface CategoryBody
 */
export interface CategoryBody {
    /**
     * 
     * @type {CategoryPayload}
     * @memberof CategoryBody
     */
    payload?: CategoryPayload;
    /**
     * 
     * @type {Jwt}
     * @memberof CategoryBody
     */
    jwt?: Jwt;
}
/**
 * 
 * @export
 * @interface CategoryBody1
 */
export interface CategoryBody1 {
    /**
     * 
     * @type {CategoryPayload}
     * @memberof CategoryBody1
     */
    payload?: CategoryPayload;
    /**
     * 
     * @type {Jwt}
     * @memberof CategoryBody1
     */
    jwt?: Jwt;
}
/**
 * 
 * @export
 * @interface CategoryCompany
 */
export interface CategoryCompany {
    /**
     * 
     * @type {string}
     * @memberof CategoryCompany
     */
    bct?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryCompany
     */
    market?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryCompany
     */
    aircraft?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryCompany
     */
    embCategoryID?: string;
}
/**
 * 
 * @export
 * @interface CategoryCompanyBody
 */
export interface CategoryCompanyBody {
    /**
     * 
     * @type {CategoryCompanyPayload}
     * @memberof CategoryCompanyBody
     */
    payload?: CategoryCompanyPayload;
    /**
     * 
     * @type {Jwt}
     * @memberof CategoryCompanyBody
     */
    jwt?: Jwt;
}
/**
 * 
 * @export
 * @interface CategoryCompanyBody1
 */
export interface CategoryCompanyBody1 {
    /**
     * 
     * @type {CategoryCompanyPayload}
     * @memberof CategoryCompanyBody1
     */
    payload?: CategoryCompanyPayload;
    /**
     * 
     * @type {Jwt}
     * @memberof CategoryCompanyBody1
     */
    jwt?: Jwt;
}
/**
 * 
 * @export
 * @interface CategoryCompanyPayload
 */
export interface CategoryCompanyPayload {
    /**
     * 
     * @type {string}
     * @memberof CategoryCompanyPayload
     */
    embCompanyCode?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CategoryCompanyPayload
     */
    embCategoryID?: Array<string>;
}
/**
 * 
 * @export
 * @interface CategoryDTO
 */
export interface CategoryDTO {
    /**
     * 
     * @type {Array<string>}
     * @memberof CategoryDTO
     */
    embWantedBCT?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CategoryDTO
     */
    embWantedMarket?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CategoryDTO
     */
    embWantedAirCraft?: Array<string>;
}
/**
 * 
 * @export
 * @interface CategoryMarketBody
 */
export interface CategoryMarketBody {
    /**
     * 
     * @type {CategoryPayload}
     * @memberof CategoryMarketBody
     */
    payload?: CategoryPayload;
    /**
     * 
     * @type {Jwt}
     * @memberof CategoryMarketBody
     */
    jwt?: Jwt;
}
/**
 * 
 * @export
 * @interface CategoryMarketBody1
 */
export interface CategoryMarketBody1 {
    /**
     * 
     * @type {CategoryPayload}
     * @memberof CategoryMarketBody1
     */
    payload?: CategoryPayload;
    /**
     * 
     * @type {Jwt}
     * @memberof CategoryMarketBody1
     */
    jwt?: Jwt;
}
/**
 * 
 * @export
 * @interface CategoryPayload
 */
export interface CategoryPayload {
    /**
     * 
     * @type {string}
     * @memberof CategoryPayload
     */
    cn: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryPayload
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryPayload
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryPayload
     */
    embCategoryID?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CategoryPayload
     */
    embCompanyType?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CategoryPayload
     */
    embMarket?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CategoryPayload
     */
    embTypeAirCraft?: Array<string>;
}
/**
 * 
 * @export
 * @interface Company
 */
export interface Company {
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    ou?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    dn?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    cn?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    embAddressNickname?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    embCompanyCode?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    timeZone?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    co?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    st?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    location?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    streetAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    postalCode?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    telephoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    otherTelephone?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    extensionTelephoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    facsimileTelephoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    embURL?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    embInterestFlyEmbraer?: string;
    /**
     * 
     * @type {Array<BusinessCompanyType>}
     * @memberof Company
     */
    embWantedBCT?: Array<BusinessCompanyType>;
    /**
     * 
     * @type {Array<Market>}
     * @memberof Company
     */
    embWantedMarket?: Array<Market>;
    /**
     * 
     * @type {Array<AircraftType>}
     * @memberof Company
     */
    embWantedAirCraft?: Array<AircraftType>;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    embCompanyRepresentant?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    embStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    embLastDateStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    embCreationDate?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Company
     */
    companyDomain?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Company
     */
    embMarket?: Array<string>;
}
/**
 * 
 * @export
 * @interface CompanyApplicationPayload
 */
export interface CompanyApplicationPayload {
    /**
     * 
     * @type {string}
     * @memberof CompanyApplicationPayload
     */
    embCompanyCode: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CompanyApplicationPayload
     */
    applicationDn: Array<string>;
}
/**
 * 
 * @export
 * @interface CompanyBody
 */
export interface CompanyBody {
    /**
     * 
     * @type {UpdateCompanyDTO}
     * @memberof CompanyBody
     */
    updateCompanyDTO?: UpdateCompanyDTO;
    /**
     * 
     * @type {Jwt}
     * @memberof CompanyBody
     */
    jwt?: Jwt;
}
/**
 * 
 * @export
 * @interface CompanyDTO
 */
export interface CompanyDTO {
    /**
     * 
     * @type {string}
     * @memberof CompanyDTO
     */
    companyName: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyDTO
     */
    embAddressNickname: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyDTO
     */
    country: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyDTO
     */
    state: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyDTO
     */
    city: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyDTO
     */
    address: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyDTO
     */
    postalCode: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyDTO
     */
    embURL?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyDTO
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyDTO
     */
    embInterestFlyEmbraer?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyDTO
     */
    timeZone?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CompanyDTO
     */
    companyDomain: Array<string>;
    /**
     * 
     * @type {UserDTO}
     * @memberof CompanyDTO
     */
    companyAdministrator: UserDTO;
    /**
     * 
     * @type {CategoryDTO}
     * @memberof CompanyDTO
     */
    category: CategoryDTO;
}
/**
 * 
 * @export
 * @interface CompanyExistsDTO
 */
export interface CompanyExistsDTO {
    /**
     * 
     * @type {Array<Company>}
     * @memberof CompanyExistsDTO
     */
    companies?: Array<Company>;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyExistsDTO
     */
    companyExists?: boolean;
}
/**
 * 
 * @export
 * @interface CompanyObject
 */
export interface CompanyObject {
    /**
     * 
     * @type {string}
     * @memberof CompanyObject
     */
    companyCode?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyObject
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyObject
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyObject
     */
    lastDateUpdate?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyObject
     */
    contacts?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyObject
     */
    status?: string;
}
/**
 * 
 * @export
 * @interface CompanyServicePayload
 */
export interface CompanyServicePayload {
    /**
     * 
     * @type {string}
     * @memberof CompanyServicePayload
     */
    embCompanyCode: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CompanyServicePayload
     */
    serviceDn: Array<string>;
}
/**
 * 
 * @export
 * @interface ContactUsPayload
 */
export interface ContactUsPayload {
    /**
     * 
     * @type {string}
     * @memberof ContactUsPayload
     */
    companyCode?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactUsPayload
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactUsPayload
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactUsPayload
     */
    userDn?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactUsPayload
     */
    comment?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactUsPayload
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactUsPayload
     */
    email?: string;
}
/**
 * 
 * @export
 * @interface ContentAdminApp
 */
export interface ContentAdminApp {
    /**
     * 
     * @type {number}
     * @memberof ContentAdminApp
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ContentAdminApp
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentAdminApp
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentAdminApp
     */
    userDn?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentAdminApp
     */
    applicationName?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentAdminApp
     */
    applicationDn?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentAdminApp
     */
    email?: string;
}
/**
 * 
 * @export
 * @interface ContentAdminAppDTO
 */
export interface ContentAdminAppDTO {
    /**
     * 
     * @type {string}
     * @memberof ContentAdminAppDTO
     */
    applicationDn?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentAdminAppDTO
     */
    applicationName?: string;
    /**
     * 
     * @type {Array<ContentAdminDTO>}
     * @memberof ContentAdminAppDTO
     */
    admins?: Array<ContentAdminDTO>;
}
/**
 * 
 * @export
 * @interface ContentAdminAppPayload
 */
export interface ContentAdminAppPayload {
    /**
     * 
     * @type {string}
     * @memberof ContentAdminAppPayload
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ContentAdminAppPayload
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof ContentAdminAppPayload
     */
    userDn: string;
    /**
     * 
     * @type {string}
     * @memberof ContentAdminAppPayload
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof ContentAdminAppPayload
     */
    applicationName: string;
    /**
     * 
     * @type {string}
     * @memberof ContentAdminAppPayload
     */
    applicationDn: string;
}
/**
 * 
 * @export
 * @interface ContentAdminDTO
 */
export interface ContentAdminDTO {
    /**
     * 
     * @type {string}
     * @memberof ContentAdminDTO
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentAdminDTO
     */
    dn?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentAdminDTO
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentAdminDTO
     */
    email?: string;
}
/**
 * 
 * @export
 * @interface ContractUploadBody
 */
export interface ContractUploadBody {
    /**
     * 
     * @type {Blob}
     * @memberof ContractUploadBody
     */
    document: Blob;
}
/**
 * 
 * @export
 * @interface Country
 */
export interface Country {
    /**
     * 
     * @type {number}
     * @memberof Country
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Country
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Country
     */
    prefix?: string;
    /**
     * 
     * @type {string}
     * @memberof Country
     */
    ddi?: string;
}
/**
 * 
 * @export
 * @interface CreateResponse
 */
export interface CreateResponse {
    /**
     * Codigo de retorno. 100 = erro generico. 101 = atributos invalidos. 200 = sucesso
     * @type {number}
     * @memberof CreateResponse
     */
    code?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateResponse
     */
    invalidatedAttributes?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CreateResponse
     */
    userDn?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateResponse
     */
    embCompanyCode?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateResponse
     */
    dn?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateResponse
     */
    cn?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateResponse
     */
    embCategoryID?: string;
}
/**
 * 
 * @export
 * @interface Email
 */
export interface Email {
    /**
     * 
     * @type {number}
     * @memberof Email
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Email
     */
    templateCode?: string;
    /**
     * 
     * @type {string}
     * @memberof Email
     */
    recipient?: string;
    /**
     * 
     * @type {string}
     * @memberof Email
     */
    msgBody?: string;
    /**
     * 
     * @type {string}
     * @memberof Email
     */
    subject?: string;
    /**
     * 
     * @type {string}
     * @memberof Email
     */
    attachment?: string;
}
/**
 * 
 * @export
 * @interface EmailPayload
 */
export interface EmailPayload {
    /**
     * 
     * @type {string}
     * @memberof EmailPayload
     */
    templateCode?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof EmailPayload
     */
    recipient: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof EmailPayload
     */
    msgBody?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailPayload
     */
    subject: string;
    /**
     * 
     * @type {string}
     * @memberof EmailPayload
     */
    attachment?: string;
}
/**
 * 
 * @export
 * @interface FileInfo
 */
export interface FileInfo {
    /**
     * 
     * @type {string}
     * @memberof FileInfo
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof FileInfo
     */
    url?: string;
}
/**
 * 
 * @export
 * @interface ImpersonateBody
 */
export interface ImpersonateBody {
    /**
     * 
     * @type {ImpersonatePayload}
     * @memberof ImpersonateBody
     */
    payload?: ImpersonatePayload;
    /**
     * 
     * @type {Jwt}
     * @memberof ImpersonateBody
     */
    jwt?: Jwt;
}
/**
 * 
 * @export
 * @interface ImpersonatePayload
 */
export interface ImpersonatePayload {
    /**
     * 
     * @type {string}
     * @memberof ImpersonatePayload
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof ImpersonatePayload
     */
    userDn: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ImpersonatePayload
     */
    serviceDn: Array<string>;
}
/**
 * 
 * @export
 * @interface ImpersonateUserResponse
 */
export interface ImpersonateUserResponse {
    /**
     * 
     * @type {string}
     * @memberof ImpersonateUserResponse
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof ImpersonateUserResponse
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof ImpersonateUserResponse
     */
    userDn?: string;
    /**
     * 
     * @type {string}
     * @memberof ImpersonateUserResponse
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof ImpersonateUserResponse
     */
    companyName?: string;
}
/**
 * 
 * @export
 * @interface JobFunction
 */
export interface JobFunction {
    /**
     * 
     * @type {string}
     * @memberof JobFunction
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof JobFunction
     */
    dn: string;
    /**
     * 
     * @type {Array<JobFunctionDetail>}
     * @memberof JobFunction
     */
    services: Array<JobFunctionDetail>;
}
/**
 * 
 * @export
 * @interface JobFunctionDetail
 */
export interface JobFunctionDetail {
    /**
     * 
     * @type {string}
     * @memberof JobFunctionDetail
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof JobFunctionDetail
     */
    dn: string;
    /**
     * 
     * @type {boolean}
     * @memberof JobFunctionDetail
     */
    remove: boolean;
}
/**
 * 
 * @export
 * @interface Jwt
 */
export interface Jwt {
    /**
     * 
     * @type {string}
     * @memberof Jwt
     */
    tokenValue?: string;
    /**
     * 
     * @type {Date}
     * @memberof Jwt
     */
    issuedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Jwt
     */
    expiresAt?: Date;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof Jwt
     */
    headers?: { [key: string]: any; };
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof Jwt
     */
    claims?: { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof Jwt
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof Jwt
     */
    notBefore?: Date;
    /**
     * 
     * @type {string}
     * @memberof Jwt
     */
    issuer?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Jwt
     */
    audience?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Jwt
     */
    subject?: string;
}
/**
 * 
 * @export
 * @interface LinksApplication
 */
export interface LinksApplication {
    /**
     * 
     * @type {number}
     * @memberof LinksApplication
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof LinksApplication
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof LinksApplication
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof LinksApplication
     */
    dn?: string;
}
/**
 * 
 * @export
 * @interface Market
 */
export interface Market {
    /**
     * 
     * @type {string}
     * @memberof Market
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof Market
     */
    dn?: string;
    /**
     * 
     * @type {string}
     * @memberof Market
     */
    cn?: string;
    /**
     * 
     * @type {string}
     * @memberof Market
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface MenuDTO
 */
export interface MenuDTO {
    /**
     * 
     * @type {number}
     * @memberof MenuDTO
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof MenuDTO
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof MenuDTO
     */
    order?: number;
    /**
     * 
     * @type {Array<SubMenuDTO>}
     * @memberof MenuDTO
     */
    subMenus?: Array<SubMenuDTO>;
}
/**
 * 
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    htmlMessage?: string;
    /**
     * 
     * @type {Date}
     * @memberof Message
     */
    startDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Message
     */
    endDate?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof Message
     */
    alert?: boolean;
}
/**
 * 
 * @export
 * @interface MessageCenterPayload
 */
export interface MessageCenterPayload {
    /**
     * 
     * @type {string}
     * @memberof MessageCenterPayload
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof MessageCenterPayload
     */
    htmlMessage: string;
    /**
     * 
     * @type {Date}
     * @memberof MessageCenterPayload
     */
    startDate: Date;
    /**
     * 
     * @type {Date}
     * @memberof MessageCenterPayload
     */
    endDate: Date;
    /**
     * 
     * @type {boolean}
     * @memberof MessageCenterPayload
     */
    alert?: boolean;
    /**
     * 
     * @type {Array<MessageDTO>}
     * @memberof MessageCenterPayload
     */
    messages?: Array<MessageDTO>;
}
/**
 * 
 * @export
 * @interface MessageDTO
 */
export interface MessageDTO {
    /**
     * 
     * @type {boolean}
     * @memberof MessageDTO
     */
    groupAll?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MessageDTO
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageDTO
     */
    userLabel?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageDTO
     */
    companyId?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageDTO
     */
    companyLabel?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageDTO
     */
    bctId?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageDTO
     */
    bctLabel?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageDTO
     */
    marketId?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageDTO
     */
    marketLabel?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageDTO
     */
    aircraftId?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageDTO
     */
    aircraftLabel?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageDTO
     */
    applicationId?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageDTO
     */
    applicationLabel?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageDTO
     */
    serviceId?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageDTO
     */
    serviceLabel?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageDTO
     */
    profileId?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageDTO
     */
    profileLabel?: string;
}
/**
 * 
 * @export
 * @interface MessageGroupedDTO
 */
export interface MessageGroupedDTO {
    /**
     * 
     * @type {number}
     * @memberof MessageGroupedDTO
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof MessageGroupedDTO
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageGroupedDTO
     */
    htmlMessage?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageGroupedDTO
     */
    startDate?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageGroupedDTO
     */
    endDate?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MessageGroupedDTO
     */
    alert?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MessageGroupedDTO
     */
    recipients?: string;
    /**
     * 
     * @type {Array<MessageDTO>}
     * @memberof MessageGroupedDTO
     */
    messages?: Array<MessageDTO>;
}
/**
 * 
 * @export
 * @interface MessageTemplate
 */
export interface MessageTemplate {
    /**
     * 
     * @type {number}
     * @memberof MessageTemplate
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplate
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplate
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplate
     */
    htmlMessage?: string;
    /**
     * 
     * @type {Date}
     * @memberof MessageTemplate
     */
    incDate?: Date;
}
/**
 * 
 * @export
 * @interface MessageTemplateDTO
 */
export interface MessageTemplateDTO {
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateDTO
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateDTO
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateDTO
     */
    htmlMessage: string;
    /**
     * 
     * @type {Date}
     * @memberof MessageTemplateDTO
     */
    incDate: Date;
}
/**
 * 
 * @export
 * @interface MessageUser
 */
export interface MessageUser {
    /**
     * 
     * @type {number}
     * @memberof MessageUser
     */
    id?: number;
    /**
     * 
     * @type {Message}
     * @memberof MessageUser
     */
    message?: Message;
    /**
     * 
     * @type {string}
     * @memberof MessageUser
     */
    userCn?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageUser
     */
    displayName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MessageUser
     */
    read?: boolean;
}
/**
 * 
 * @export
 * @interface PageContentDTO
 */
export interface PageContentDTO {
    /**
     * 
     * @type {number}
     * @memberof PageContentDTO
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof PageContentDTO
     */
    key?: number;
    /**
     * 
     * @type {string}
     * @memberof PageContentDTO
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof PageContentDTO
     */
    sectionKey?: number;
    /**
     * 
     * @type {string}
     * @memberof PageContentDTO
     */
    css?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PageContentDTO
     */
    className?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PageContentDTO
     */
    content?: string;
    /**
     * 
     * @type {string}
     * @memberof PageContentDTO
     */
    children?: string;
    /**
     * 
     * @type {number}
     * @memberof PageContentDTO
     */
    idPageSection?: number;
}
/**
 * 
 * @export
 * @interface PageContentModel
 */
export interface PageContentModel {
    /**
     * 
     * @type {number}
     * @memberof PageContentModel
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof PageContentModel
     */
    key?: number;
    /**
     * 
     * @type {string}
     * @memberof PageContentModel
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof PageContentModel
     */
    sectionKey?: number;
    /**
     * 
     * @type {string}
     * @memberof PageContentModel
     */
    css?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PageContentModel
     */
    className?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PageContentModel
     */
    content?: string;
    /**
     * 
     * @type {string}
     * @memberof PageContentModel
     */
    children?: string;
    /**
     * 
     * @type {number}
     * @memberof PageContentModel
     */
    idPageSection?: number;
}
/**
 * 
 * @export
 * @interface PageDTO
 */
export interface PageDTO {
    /**
     * 
     * @type {number}
     * @memberof PageDTO
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof PageDTO
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof PageDTO
     */
    slug?: string;
    /**
     * 
     * @type {string}
     * @memberof PageDTO
     */
    type?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PageDTO
     */
    disabled?: boolean;
    /**
     * 
     * @type {Array<PageSectionDTO>}
     * @memberof PageDTO
     */
    pageSections?: Array<PageSectionDTO>;
}
/**
 * 
 * @export
 * @interface PageMessageGroupedDTO
 */
export interface PageMessageGroupedDTO {
    /**
     * 
     * @type {number}
     * @memberof PageMessageGroupedDTO
     */
    totalPages?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMessageGroupedDTO
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMessageGroupedDTO
     */
    size?: number;
    /**
     * 
     * @type {Array<MessageGroupedDTO>}
     * @memberof PageMessageGroupedDTO
     */
    content?: Array<MessageGroupedDTO>;
    /**
     * 
     * @type {number}
     * @memberof PageMessageGroupedDTO
     */
    number?: number;
    /**
     * 
     * @type {Sort}
     * @memberof PageMessageGroupedDTO
     */
    sort?: Sort;
    /**
     * 
     * @type {number}
     * @memberof PageMessageGroupedDTO
     */
    numberOfElements?: number;
    /**
     * 
     * @type {PageableObject}
     * @memberof PageMessageGroupedDTO
     */
    pageable?: PageableObject;
    /**
     * 
     * @type {boolean}
     * @memberof PageMessageGroupedDTO
     */
    first?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageMessageGroupedDTO
     */
    last?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageMessageGroupedDTO
     */
    empty?: boolean;
}
/**
 * 
 * @export
 * @interface PageMessageTemplate
 */
export interface PageMessageTemplate {
    /**
     * 
     * @type {number}
     * @memberof PageMessageTemplate
     */
    totalPages?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMessageTemplate
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMessageTemplate
     */
    size?: number;
    /**
     * 
     * @type {Array<MessageTemplate>}
     * @memberof PageMessageTemplate
     */
    content?: Array<MessageTemplate>;
    /**
     * 
     * @type {number}
     * @memberof PageMessageTemplate
     */
    number?: number;
    /**
     * 
     * @type {Sort}
     * @memberof PageMessageTemplate
     */
    sort?: Sort;
    /**
     * 
     * @type {number}
     * @memberof PageMessageTemplate
     */
    numberOfElements?: number;
    /**
     * 
     * @type {PageableObject}
     * @memberof PageMessageTemplate
     */
    pageable?: PageableObject;
    /**
     * 
     * @type {boolean}
     * @memberof PageMessageTemplate
     */
    first?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageMessageTemplate
     */
    last?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageMessageTemplate
     */
    empty?: boolean;
}
/**
 * 
 * @export
 * @interface PageMessageUser
 */
export interface PageMessageUser {
    /**
     * 
     * @type {number}
     * @memberof PageMessageUser
     */
    totalPages?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMessageUser
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMessageUser
     */
    size?: number;
    /**
     * 
     * @type {Array<MessageUser>}
     * @memberof PageMessageUser
     */
    content?: Array<MessageUser>;
    /**
     * 
     * @type {number}
     * @memberof PageMessageUser
     */
    number?: number;
    /**
     * 
     * @type {Sort}
     * @memberof PageMessageUser
     */
    sort?: Sort;
    /**
     * 
     * @type {number}
     * @memberof PageMessageUser
     */
    numberOfElements?: number;
    /**
     * 
     * @type {PageableObject}
     * @memberof PageMessageUser
     */
    pageable?: PageableObject;
    /**
     * 
     * @type {boolean}
     * @memberof PageMessageUser
     */
    first?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageMessageUser
     */
    last?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageMessageUser
     */
    empty?: boolean;
}
/**
 * 
 * @export
 * @interface PageModel
 */
export interface PageModel {
    /**
     * 
     * @type {number}
     * @memberof PageModel
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof PageModel
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof PageModel
     */
    slug?: string;
    /**
     * 
     * @type {string}
     * @memberof PageModel
     */
    type?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PageModel
     */
    disabled?: boolean;
    /**
     * 
     * @type {Array<PageSectionModel>}
     * @memberof PageModel
     */
    pageSections?: Array<PageSectionModel>;
}
/**
 * 
 * @export
 * @interface PageSectionDTO
 */
export interface PageSectionDTO {
    /**
     * 
     * @type {number}
     * @memberof PageSectionDTO
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof PageSectionDTO
     */
    key?: number;
    /**
     * 
     * @type {string}
     * @memberof PageSectionDTO
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof PageSectionDTO
     */
    css?: string;
    /**
     * 
     * @type {Array<PageContentDTO>}
     * @memberof PageSectionDTO
     */
    pageContents?: Array<PageContentDTO>;
    /**
     * 
     * @type {number}
     * @memberof PageSectionDTO
     */
    idPage?: number;
}
/**
 * 
 * @export
 * @interface PageSectionModel
 */
export interface PageSectionModel {
    /**
     * 
     * @type {number}
     * @memberof PageSectionModel
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof PageSectionModel
     */
    key?: number;
    /**
     * 
     * @type {string}
     * @memberof PageSectionModel
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof PageSectionModel
     */
    css?: string;
    /**
     * 
     * @type {Array<PageContentModel>}
     * @memberof PageSectionModel
     */
    pageContents?: Array<PageContentModel>;
    /**
     * 
     * @type {number}
     * @memberof PageSectionModel
     */
    idPage?: number;
}
/**
 * 
 * @export
 * @interface PageWorkflowDTO
 */
export interface PageWorkflowDTO {
    /**
     * 
     * @type {number}
     * @memberof PageWorkflowDTO
     */
    totalPages?: number;
    /**
     * 
     * @type {number}
     * @memberof PageWorkflowDTO
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PageWorkflowDTO
     */
    size?: number;
    /**
     * 
     * @type {Array<WorkflowDTO>}
     * @memberof PageWorkflowDTO
     */
    content?: Array<WorkflowDTO>;
    /**
     * 
     * @type {number}
     * @memberof PageWorkflowDTO
     */
    number?: number;
    /**
     * 
     * @type {Sort}
     * @memberof PageWorkflowDTO
     */
    sort?: Sort;
    /**
     * 
     * @type {number}
     * @memberof PageWorkflowDTO
     */
    numberOfElements?: number;
    /**
     * 
     * @type {PageableObject}
     * @memberof PageWorkflowDTO
     */
    pageable?: PageableObject;
    /**
     * 
     * @type {boolean}
     * @memberof PageWorkflowDTO
     */
    first?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageWorkflowDTO
     */
    last?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageWorkflowDTO
     */
    empty?: boolean;
}
/**
 * 
 * @export
 * @interface Pageable
 */
export interface Pageable {
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    page?: number;
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    size?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Pageable
     */
    sort?: Array<string>;
}
/**
 * 
 * @export
 * @interface PageableObject
 */
export interface PageableObject {
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    offset?: number;
    /**
     * 
     * @type {Sort}
     * @memberof PageableObject
     */
    sort?: Sort;
    /**
     * 
     * @type {boolean}
     * @memberof PageableObject
     */
    paged?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageableObject
     */
    unpaged?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    pageNumber?: number;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    pageSize?: number;
}
/**
 * 
 * @export
 * @interface Password
 */
export interface Password {
    /**
     * 
     * @type {string}
     * @memberof Password
     */
    dn?: string;
    /**
     * 
     * @type {string}
     * @memberof Password
     */
    cn?: string;
    /**
     * 
     * @type {string}
     * @memberof Password
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof Password
     */
    email?: string;
}
/**
 * 
 * @export
 * @interface PasswordPayload
 */
export interface PasswordPayload {
    /**
     * 
     * @type {string}
     * @memberof PasswordPayload
     */
    cn?: string;
    /**
     * 
     * @type {string}
     * @memberof PasswordPayload
     */
    dn?: string;
    /**
     * 
     * @type {string}
     * @memberof PasswordPayload
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof PasswordPayload
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof PasswordPayload
     */
    username?: string;
}
/**
 * 
 * @export
 * @interface Profile
 */
export interface Profile {
    /**
     * 
     * @type {number}
     * @memberof Profile
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Profile
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof Profile
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface ServiceApp
 */
export interface ServiceApp {
    /**
     * 
     * @type {string}
     * @memberof ServiceApp
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceApp
     */
    dn?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceApp
     */
    cn?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceApp
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceApp
     */
    appDisplayName?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceApp
     */
    appDn?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceApp
     */
    embDisplayRule?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceApp
     */
    embBusinessRule?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceApp
     */
    embJFGroup?: string;
}
/**
 * 
 * @export
 * @interface ServicePayload
 */
export interface ServicePayload {
    /**
     * 
     * @type {string}
     * @memberof ServicePayload
     */
    cn?: string;
    /**
     * 
     * @type {string}
     * @memberof ServicePayload
     */
    dn?: string;
    /**
     * 
     * @type {string}
     * @memberof ServicePayload
     */
    applicationDn?: string;
    /**
     * 
     * @type {string}
     * @memberof ServicePayload
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof ServicePayload
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ServicePayload
     */
    embDisplayRule?: string;
}
/**
 * 
 * @export
 * @interface Sort
 */
export interface Sort {
    /**
     * 
     * @type {boolean}
     * @memberof Sort
     */
    empty?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Sort
     */
    sorted?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Sort
     */
    unsorted?: boolean;
}
/**
 * 
 * @export
 * @interface SubMenuDTO
 */
export interface SubMenuDTO {
    /**
     * 
     * @type {number}
     * @memberof SubMenuDTO
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof SubMenuDTO
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof SubMenuDTO
     */
    order?: number;
    /**
     * 
     * @type {number}
     * @memberof SubMenuDTO
     */
    openNewPage?: number;
    /**
     * 
     * @type {string}
     * @memberof SubMenuDTO
     */
    link?: string;
}
/**
 * 
 * @export
 * @interface TaskDTO
 */
export interface TaskDTO {
    /**
     * 
     * @type {number}
     * @memberof TaskDTO
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof TaskDTO
     */
    applicationName?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskDTO
     */
    applicationDn?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskDTO
     */
    startTask?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskDTO
     */
    endTask?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskDTO
     */
    responsible?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskDTO
     */
    ownerName?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskDTO
     */
    ownerDn?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskDTO
     */
    statusTask?: string;
}
/**
 * 
 * @export
 * @interface TaskPayload
 */
export interface TaskPayload {
    /**
     * 
     * @type {number}
     * @memberof TaskPayload
     */
    workflowId: number;
    /**
     * 
     * @type {number}
     * @memberof TaskPayload
     */
    taskId: number;
    /**
     * 
     * @type {string}
     * @memberof TaskPayload
     */
    comment: string;
    /**
     * 
     * @type {string}
     * @memberof TaskPayload
     */
    status: string;
}
/**
 * 
 * @export
 * @interface UpdateCompanyDTO
 */
export interface UpdateCompanyDTO {
    /**
     * 
     * @type {string}
     * @memberof UpdateCompanyDTO
     */
    embCompanyCode: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCompanyDTO
     */
    companyName?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCompanyDTO
     */
    embAddressNickname?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCompanyDTO
     */
    country?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCompanyDTO
     */
    state?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCompanyDTO
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCompanyDTO
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCompanyDTO
     */
    postalCode?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCompanyDTO
     */
    embURL?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCompanyDTO
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCompanyDTO
     */
    embInterestFlyEmbraer?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCompanyDTO
     */
    embStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCompanyDTO
     */
    timeZone?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateCompanyDTO
     */
    companyDomain?: Array<string>;
    /**
     * 
     * @type {UserDTO}
     * @memberof UpdateCompanyDTO
     */
    companyAdministrator?: UserDTO;
    /**
     * 
     * @type {CategoryDTO}
     * @memberof UpdateCompanyDTO
     */
    category?: CategoryDTO;
}
/**
 * 
 * @export
 * @interface UpdateUserPayload
 */
export interface UpdateUserPayload {
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPayload
     */
    dn: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPayload
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPayload
     */
    prefix?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPayload
     */
    fullName?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPayload
     */
    jobTitle?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPayload
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPayload
     */
    email2?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPayload
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPayload
     */
    phone2?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPayload
     */
    ddi?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPayload
     */
    ddi2?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPayload
     */
    fax?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateUserPayload
     */
    requiredServicesDn?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateUserPayload
     */
    removeServicesDn?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPayload
     */
    country?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPayload
     */
    state?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPayload
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPayload
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPayload
     */
    postalCode?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPayload
     */
    embDnCompany?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPayload
     */
    embNameCompany?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPayload
     */
    embCompanyCode?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPayload
     */
    embNameCompanyAdmin?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPayload
     */
    embPersonalTitleCompanyAdmin?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPayload
     */
    embProfile?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPayload
     */
    embTheme?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPayload
     */
    embCreationDate?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPayload
     */
    embStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPayload
     */
    embPAM?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPayload
     */
    loginDisable?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPayload
     */
    embUserContentAdmin?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPayload
     */
    gtuAcceptDate?: string;
}
/**
 * 
 * @export
 * @interface UrlExpireToken
 */
export interface UrlExpireToken {
    /**
     * 
     * @type {number}
     * @memberof UrlExpireToken
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof UrlExpireToken
     */
    token?: string;
    /**
     * 
     * @type {Date}
     * @memberof UrlExpireToken
     */
    expireTime?: Date;
    /**
     * 
     * @type {string}
     * @memberof UrlExpireToken
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof UrlExpireToken
     */
    dn?: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    dn?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    cn?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    givenName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    sn?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    personalTitle?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    mail?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    embMail2?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    telephoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    otherTelephone?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    ddi?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    ddi2?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    extensionTelephoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    fax?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    streetAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    location?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    st?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    postalCode?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    co?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof User
     */
    embWantedJF?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    embCreationDate?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    embProfile?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    embDnCompany?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    embNameCompany?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    embCompanyCode?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    embNameCompanyAdmin?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    embPersonalTitleCompanyAdmin?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    embTheme?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    embStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    embApprovalDate?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    embApprovalUserName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    embPAM?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    embUserContentAdmin?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    embLogin?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    embLoginOEX?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    loginDisable?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    userPrincipalName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    gtuAcceptDate?: string;
}
/**
 * 
 * @export
 * @interface UserBody
 */
export interface UserBody {
    /**
     * 
     * @type {UpdateUserPayload}
     * @memberof UserBody
     */
    updateUserDTO?: UpdateUserPayload;
    /**
     * 
     * @type {Jwt}
     * @memberof UserBody
     */
    jwt?: Jwt;
}
/**
 * 
 * @export
 * @interface UserDTO
 */
export interface UserDTO {
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    dn?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    prefix?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    fullName: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    jobTitle: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    emailConfirmation: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    email2?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    phone: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    phone2?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    ddi: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    ddi2?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    fax?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserDTO
     */
    requiredServices?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    country?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    state?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    postalCode?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    embDnCompany?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    embNameCompany?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    embCompanyCode?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    embNameCompanyAdmin?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    embPersonalTitleCompanyAdmin?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    embProfile?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    embTheme?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    embCreationDate?: string;
}
/**
 * 
 * @export
 * @interface UserExists
 */
export interface UserExists {
    /**
     * 
     * @type {string}
     * @memberof UserExists
     */
    dn?: string;
    /**
     * 
     * @type {string}
     * @memberof UserExists
     */
    cn?: string;
    /**
     * 
     * @type {string}
     * @memberof UserExists
     */
    email?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserExists
     */
    exist?: boolean;
}
/**
 * 
 * @export
 * @interface UserObject
 */
export interface UserObject {
    /**
     * 
     * @type {string}
     * @memberof UserObject
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserObject
     */
    profile?: string;
    /**
     * 
     * @type {string}
     * @memberof UserObject
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof UserObject
     */
    company?: string;
    /**
     * 
     * @type {string}
     * @memberof UserObject
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof UserObject
     */
    contacts?: string;
    /**
     * 
     * @type {string}
     * @memberof UserObject
     */
    lastDateUpdate?: string;
}
/**
 * 
 * @export
 * @interface UserServiceAddRemovePayload
 */
export interface UserServiceAddRemovePayload {
    /**
     * 
     * @type {string}
     * @memberof UserServiceAddRemovePayload
     */
    userDn: string;
    /**
     * 
     * @type {string}
     * @memberof UserServiceAddRemovePayload
     */
    username: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserServiceAddRemovePayload
     */
    addServiceDn?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserServiceAddRemovePayload
     */
    removeServiceDn?: Array<string>;
}
/**
 * 
 * @export
 * @interface UserServicePayload
 */
export interface UserServicePayload {
    /**
     * 
     * @type {string}
     * @memberof UserServicePayload
     */
    userDn: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserServicePayload
     */
    serviceDn: Array<string>;
}
/**
 * 
 * @export
 * @interface WorkflowActivity
 */
export interface WorkflowActivity {
    /**
     * 
     * @type {number}
     * @memberof WorkflowActivity
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkflowActivity
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowActivity
     */
    ownerGroupCode?: string;
}
/**
 * 
 * @export
 * @interface WorkflowDTO
 */
export interface WorkflowDTO {
    /**
     * 
     * @type {number}
     * @memberof WorkflowDTO
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkflowDTO
     */
    companyName?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowDTO
     */
    companyCode?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowDTO
     */
    companyAdminName?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowDTO
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowDTO
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowDTO
     */
    dateRegistration?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowDTO
     */
    startWorkflow?: string;
    /**
     * 
     * @type {Array<TaskDTO>}
     * @memberof WorkflowDTO
     */
    tasks?: Array<TaskDTO>;
    /**
     * 
     * @type {string}
     * @memberof WorkflowDTO
     */
    statusWorkflow?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowDTO
     */
    endWorkflow?: string;
}
/**
 * 
 * @export
 * @interface WorkflowPayload
 */
export interface WorkflowPayload {
    /**
     * 
     * @type {string}
     * @memberof WorkflowPayload
     */
    companyName: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowPayload
     */
    companyAdminName: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowPayload
     */
    companyDn: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowPayload
     */
    companyCode: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowPayload
     */
    streetAddress: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowPayload
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowPayload
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowPayload
     */
    dateRegistration: string;
    /**
     * 
     * @type {boolean}
     * @memberof WorkflowPayload
     */
    isContract: boolean;
    /**
     * 
     * @type {Array<JobFunction>}
     * @memberof WorkflowPayload
     */
    jobFunction: Array<JobFunction>;
}
/**
 * 
 * @export
 * @interface WorkflowProcess
 */
export interface WorkflowProcess {
    /**
     * 
     * @type {number}
     * @memberof WorkflowProcess
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkflowProcess
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowProcess
     */
    companyName?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowProcess
     */
    companyAdminName?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowProcess
     */
    companyCode?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowProcess
     */
    companyDn?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowProcess
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowProcess
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowProcess
     */
    type?: string;
    /**
     * 
     * @type {Date}
     * @memberof WorkflowProcess
     */
    dateRegistration?: Date;
    /**
     * 
     * @type {Date}
     * @memberof WorkflowProcess
     */
    startWorkflow?: Date;
    /**
     * 
     * @type {Date}
     * @memberof WorkflowProcess
     */
    endWorkflow?: Date;
}
/**
 * 
 * @export
 * @interface WorkflowTask
 */
export interface WorkflowTask {
    /**
     * 
     * @type {number}
     * @memberof WorkflowTask
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTask
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTask
     */
    comment?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTask
     */
    applicationName?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTask
     */
    applicationDn?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTask
     */
    flowCode?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTask
     */
    ownerName?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTask
     */
    ownerDn?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTask
     */
    status?: string;
    /**
     * 
     * @type {Date}
     * @memberof WorkflowTask
     */
    dateTask?: Date;
    /**
     * 
     * @type {Date}
     * @memberof WorkflowTask
     */
    startTask?: Date;
    /**
     * 
     * @type {Date}
     * @memberof WorkflowTask
     */
    endTask?: Date;
    /**
     * 
     * @type {WorkflowActivity}
     * @memberof WorkflowTask
     */
    activity?: WorkflowActivity;
}
/**
 * 
 * @export
 * @interface WorkflowTaskBody
 */
export interface WorkflowTaskBody {
    /**
     * 
     * @type {TaskPayload}
     * @memberof WorkflowTaskBody
     */
    payload?: TaskPayload;
    /**
     * 
     * @type {Jwt}
     * @memberof WorkflowTaskBody
     */
    jwt?: Jwt;
}
/**
 * 
 * @export
 * @interface WorkflowTaskDTO
 */
export interface WorkflowTaskDTO {
    /**
     * 
     * @type {number}
     * @memberof WorkflowTaskDTO
     */
    workflowId?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTaskDTO
     */
    applicationName?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTaskDTO
     */
    applicationDn?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTaskDTO
     */
    serviceName?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTaskDTO
     */
    serviceDn?: string;
    /**
     * 
     * @type {Array<WorkflowTaskDetailsDTO>}
     * @memberof WorkflowTaskDTO
     */
    tasks?: Array<WorkflowTaskDetailsDTO>;
}
/**
 * 
 * @export
 * @interface WorkflowTaskDetailsDTO
 */
export interface WorkflowTaskDetailsDTO {
    /**
     * 
     * @type {number}
     * @memberof WorkflowTaskDetailsDTO
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTaskDetailsDTO
     */
    responsible?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTaskDetailsDTO
     */
    ownerName?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTaskDetailsDTO
     */
    ownerDn?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTaskDetailsDTO
     */
    statusTask?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTaskDetailsDTO
     */
    endTask?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTaskDetailsDTO
     */
    comment?: string;
}
/**
 * CategoryEndpointsApi - fetch parameter creator
 * @export
 */
export const CategoryEndpointsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add category to company
         * @param {CategoryCompanyBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCategoryToCompany(body: CategoryCompanyBody, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addCategoryToCompany.');
            }
            const localVarPath = `/category/company`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CategoryCompanyBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create aircraft type
         * @param {CategoryAircraftBody1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAircraftType(body: CategoryAircraftBody1, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createAircraftType.');
            }
            const localVarPath = `/category/aircraft`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CategoryAircraftBody1" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create business company type
         * @param {CategoryBctBody1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBct(body: CategoryBctBody1, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createBct.');
            }
            const localVarPath = `/category/bct`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CategoryBctBody1" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create category
         * @param {CategoryBody1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory(body: CategoryBody1, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createCategory.');
            }
            const localVarPath = `/category`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CategoryBody1" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create market
         * @param {CategoryMarketBody1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMarket(body: CategoryMarketBody1, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createMarket.');
            }
            const localVarPath = `/category/market`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CategoryMarketBody1" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete aircraft type
         * @param {string} aircraft 
         * @param {Jwt} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAircraftType(aircraft: string, body?: Jwt, options: any = {}): FetchArgs {
            // verify required parameter 'aircraft' is not null or undefined
            if (aircraft === null || aircraft === undefined) {
                throw new RequiredError('aircraft','Required parameter aircraft was null or undefined when calling deleteAircraftType.');
            }
            const localVarPath = `/category/aircraft`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (aircraft !== undefined) {
                localVarQueryParameter['aircraft'] = aircraft;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Jwt" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete business company type
         * @param {string} bct 
         * @param {Jwt} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBct(bct: string, body?: Jwt, options: any = {}): FetchArgs {
            // verify required parameter 'bct' is not null or undefined
            if (bct === null || bct === undefined) {
                throw new RequiredError('bct','Required parameter bct was null or undefined when calling deleteBct.');
            }
            const localVarPath = `/category/bct`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bct !== undefined) {
                localVarQueryParameter['bct'] = bct;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Jwt" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete category
         * @param {string} embCategoryId 
         * @param {Jwt} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory(embCategoryId: string, body?: Jwt, options: any = {}): FetchArgs {
            // verify required parameter 'embCategoryId' is not null or undefined
            if (embCategoryId === null || embCategoryId === undefined) {
                throw new RequiredError('embCategoryId','Required parameter embCategoryId was null or undefined when calling deleteCategory.');
            }
            const localVarPath = `/category`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (embCategoryId !== undefined) {
                localVarQueryParameter['embCategoryId'] = embCategoryId;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Jwt" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete market
         * @param {string} market 
         * @param {Jwt} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMarket(market: string, body?: Jwt, options: any = {}): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling deleteMarket.');
            }
            const localVarPath = `/category/market`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Jwt" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all aircraft types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAircraftTypes(options: any = {}): FetchArgs {
            const localVarPath = `/category/aircraft`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all business company types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBcts(options: any = {}): FetchArgs {
            const localVarPath = `/category/bct`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCategories(options: any = {}): FetchArgs {
            const localVarPath = `/category`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all markets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMarkets(options: any = {}): FetchArgs {
            const localVarPath = `/category/market`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get categories from company
         * @param {string} embCompanyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoriesFromCompany(embCompanyCode: string, options: any = {}): FetchArgs {
            // verify required parameter 'embCompanyCode' is not null or undefined
            if (embCompanyCode === null || embCompanyCode === undefined) {
                throw new RequiredError('embCompanyCode','Required parameter embCompanyCode was null or undefined when calling getCategoriesFromCompany.');
            }
            const localVarPath = `/category/company`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (embCompanyCode !== undefined) {
                localVarQueryParameter['embCompanyCode'] = embCompanyCode;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get category
         * @param {string} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategory(categoryId: string, options: any = {}): FetchArgs {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new RequiredError('categoryId','Required parameter categoryId was null or undefined when calling getCategory.');
            }
            const localVarPath = `/category/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get markets and aircrafts by bct and market
         * @param {string} bct 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarketsAndAircraftByBctAndMarket(bct: string, market?: string, options: any = {}): FetchArgs {
            // verify required parameter 'bct' is not null or undefined
            if (bct === null || bct === undefined) {
                throw new RequiredError('bct','Required parameter bct was null or undefined when calling getMarketsAndAircraftByBctAndMarket.');
            }
            const localVarPath = `/category/bct/market/aircraft`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bct !== undefined) {
                localVarQueryParameter['bct'] = bct;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove categories from company
         * @param {CategoryCompanyBody1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCategoryToCompany(body: CategoryCompanyBody1, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling removeCategoryToCompany.');
            }
            const localVarPath = `/category/company`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CategoryCompanyBody1" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update aircraft type
         * @param {CategoryAircraftBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAircraftType(body: CategoryAircraftBody, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateAircraftType.');
            }
            const localVarPath = `/category/aircraft`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CategoryAircraftBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update business company type
         * @param {CategoryBctBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBct(body: CategoryBctBody, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateBct.');
            }
            const localVarPath = `/category/bct`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CategoryBctBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update category
         * @param {CategoryBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory(body: CategoryBody, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateCategory.');
            }
            const localVarPath = `/category`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CategoryBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update market
         * @param {CategoryMarketBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMarket(body: CategoryMarketBody, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateMarket.');
            }
            const localVarPath = `/category/market`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CategoryMarketBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoryEndpointsApi - functional programming interface
 * @export
 */
export const CategoryEndpointsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add category to company
         * @param {CategoryCompanyBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCategoryToCompany(body: CategoryCompanyBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = CategoryEndpointsApiFetchParamCreator(configuration).addCategoryToCompany(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Create aircraft type
         * @param {CategoryAircraftBody1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAircraftType(body: CategoryAircraftBody1, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CreateResponse> {
            const localVarFetchArgs = CategoryEndpointsApiFetchParamCreator(configuration).createAircraftType(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Create business company type
         * @param {CategoryBctBody1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBct(body: CategoryBctBody1, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CreateResponse> {
            const localVarFetchArgs = CategoryEndpointsApiFetchParamCreator(configuration).createBct(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Create category
         * @param {CategoryBody1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory(body: CategoryBody1, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CreateResponse> {
            const localVarFetchArgs = CategoryEndpointsApiFetchParamCreator(configuration).createCategory(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Create market
         * @param {CategoryMarketBody1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMarket(body: CategoryMarketBody1, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CreateResponse> {
            const localVarFetchArgs = CategoryEndpointsApiFetchParamCreator(configuration).createMarket(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete aircraft type
         * @param {string} aircraft 
         * @param {Jwt} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAircraftType(aircraft: string, body?: Jwt, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = CategoryEndpointsApiFetchParamCreator(configuration).deleteAircraftType(aircraft, body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete business company type
         * @param {string} bct 
         * @param {Jwt} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBct(bct: string, body?: Jwt, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = CategoryEndpointsApiFetchParamCreator(configuration).deleteBct(bct, body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete category
         * @param {string} embCategoryId 
         * @param {Jwt} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory(embCategoryId: string, body?: Jwt, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = CategoryEndpointsApiFetchParamCreator(configuration).deleteCategory(embCategoryId, body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete market
         * @param {string} market 
         * @param {Jwt} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMarket(market: string, body?: Jwt, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = CategoryEndpointsApiFetchParamCreator(configuration).deleteMarket(market, body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get all aircraft types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAircraftTypes(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<AircraftType>> {
            const localVarFetchArgs = CategoryEndpointsApiFetchParamCreator(configuration).getAllAircraftTypes(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get all business company types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBcts(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<BusinessCompanyType>> {
            const localVarFetchArgs = CategoryEndpointsApiFetchParamCreator(configuration).getAllBcts(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get all categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCategories(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Category>> {
            const localVarFetchArgs = CategoryEndpointsApiFetchParamCreator(configuration).getAllCategories(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get all markets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMarkets(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Market>> {
            const localVarFetchArgs = CategoryEndpointsApiFetchParamCreator(configuration).getAllMarkets(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get categories from company
         * @param {string} embCompanyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoriesFromCompany(embCompanyCode: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<CategoryCompany>> {
            const localVarFetchArgs = CategoryEndpointsApiFetchParamCreator(configuration).getCategoriesFromCompany(embCompanyCode, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get category
         * @param {string} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategory(categoryId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Category>> {
            const localVarFetchArgs = CategoryEndpointsApiFetchParamCreator(configuration).getCategory(categoryId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get markets and aircrafts by bct and market
         * @param {string} bct 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarketsAndAircraftByBctAndMarket(bct: string, market?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>> {
            const localVarFetchArgs = CategoryEndpointsApiFetchParamCreator(configuration).getMarketsAndAircraftByBctAndMarket(bct, market, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Remove categories from company
         * @param {CategoryCompanyBody1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCategoryToCompany(body: CategoryCompanyBody1, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = CategoryEndpointsApiFetchParamCreator(configuration).removeCategoryToCompany(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update aircraft type
         * @param {CategoryAircraftBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAircraftType(body: CategoryAircraftBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = CategoryEndpointsApiFetchParamCreator(configuration).updateAircraftType(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update business company type
         * @param {CategoryBctBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBct(body: CategoryBctBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = CategoryEndpointsApiFetchParamCreator(configuration).updateBct(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update category
         * @param {CategoryBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory(body: CategoryBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = CategoryEndpointsApiFetchParamCreator(configuration).updateCategory(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update market
         * @param {CategoryMarketBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMarket(body: CategoryMarketBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = CategoryEndpointsApiFetchParamCreator(configuration).updateMarket(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CategoryEndpointsApi - factory interface
 * @export
 */
export const CategoryEndpointsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Add category to company
         * @param {CategoryCompanyBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCategoryToCompany(body: CategoryCompanyBody, options?: any) {
            return CategoryEndpointsApiFp(configuration).addCategoryToCompany(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Create aircraft type
         * @param {CategoryAircraftBody1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAircraftType(body: CategoryAircraftBody1, options?: any) {
            return CategoryEndpointsApiFp(configuration).createAircraftType(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Create business company type
         * @param {CategoryBctBody1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBct(body: CategoryBctBody1, options?: any) {
            return CategoryEndpointsApiFp(configuration).createBct(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Create category
         * @param {CategoryBody1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory(body: CategoryBody1, options?: any) {
            return CategoryEndpointsApiFp(configuration).createCategory(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Create market
         * @param {CategoryMarketBody1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMarket(body: CategoryMarketBody1, options?: any) {
            return CategoryEndpointsApiFp(configuration).createMarket(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete aircraft type
         * @param {string} aircraft 
         * @param {Jwt} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAircraftType(aircraft: string, body?: Jwt, options?: any) {
            return CategoryEndpointsApiFp(configuration).deleteAircraftType(aircraft, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete business company type
         * @param {string} bct 
         * @param {Jwt} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBct(bct: string, body?: Jwt, options?: any) {
            return CategoryEndpointsApiFp(configuration).deleteBct(bct, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete category
         * @param {string} embCategoryId 
         * @param {Jwt} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory(embCategoryId: string, body?: Jwt, options?: any) {
            return CategoryEndpointsApiFp(configuration).deleteCategory(embCategoryId, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete market
         * @param {string} market 
         * @param {Jwt} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMarket(market: string, body?: Jwt, options?: any) {
            return CategoryEndpointsApiFp(configuration).deleteMarket(market, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get all aircraft types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAircraftTypes(options?: any) {
            return CategoryEndpointsApiFp(configuration).getAllAircraftTypes(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get all business company types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBcts(options?: any) {
            return CategoryEndpointsApiFp(configuration).getAllBcts(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get all categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCategories(options?: any) {
            return CategoryEndpointsApiFp(configuration).getAllCategories(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get all markets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMarkets(options?: any) {
            return CategoryEndpointsApiFp(configuration).getAllMarkets(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get categories from company
         * @param {string} embCompanyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoriesFromCompany(embCompanyCode: string, options?: any) {
            return CategoryEndpointsApiFp(configuration).getCategoriesFromCompany(embCompanyCode, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get category
         * @param {string} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategory(categoryId: string, options?: any) {
            return CategoryEndpointsApiFp(configuration).getCategory(categoryId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get markets and aircrafts by bct and market
         * @param {string} bct 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarketsAndAircraftByBctAndMarket(bct: string, market?: string, options?: any) {
            return CategoryEndpointsApiFp(configuration).getMarketsAndAircraftByBctAndMarket(bct, market, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Remove categories from company
         * @param {CategoryCompanyBody1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCategoryToCompany(body: CategoryCompanyBody1, options?: any) {
            return CategoryEndpointsApiFp(configuration).removeCategoryToCompany(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update aircraft type
         * @param {CategoryAircraftBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAircraftType(body: CategoryAircraftBody, options?: any) {
            return CategoryEndpointsApiFp(configuration).updateAircraftType(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update business company type
         * @param {CategoryBctBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBct(body: CategoryBctBody, options?: any) {
            return CategoryEndpointsApiFp(configuration).updateBct(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update category
         * @param {CategoryBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory(body: CategoryBody, options?: any) {
            return CategoryEndpointsApiFp(configuration).updateCategory(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update market
         * @param {CategoryMarketBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMarket(body: CategoryMarketBody, options?: any) {
            return CategoryEndpointsApiFp(configuration).updateMarket(body, options)(fetch, basePath);
        },
    };
};

/**
 * CategoryEndpointsApi - object-oriented interface
 * @export
 * @class CategoryEndpointsApi
 * @extends {BaseAPI}
 */
export class CategoryEndpointsApi extends BaseAPI {
    /**
     * 
     * @summary Add category to company
     * @param {CategoryCompanyBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointsApi
     */
    public addCategoryToCompany(body: CategoryCompanyBody, options?: any) {
        return CategoryEndpointsApiFp(this.configuration).addCategoryToCompany(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Create aircraft type
     * @param {CategoryAircraftBody1} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointsApi
     */
    public createAircraftType(body: CategoryAircraftBody1, options?: any) {
        return CategoryEndpointsApiFp(this.configuration).createAircraftType(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Create business company type
     * @param {CategoryBctBody1} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointsApi
     */
    public createBct(body: CategoryBctBody1, options?: any) {
        return CategoryEndpointsApiFp(this.configuration).createBct(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Create category
     * @param {CategoryBody1} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointsApi
     */
    public createCategory(body: CategoryBody1, options?: any) {
        return CategoryEndpointsApiFp(this.configuration).createCategory(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Create market
     * @param {CategoryMarketBody1} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointsApi
     */
    public createMarket(body: CategoryMarketBody1, options?: any) {
        return CategoryEndpointsApiFp(this.configuration).createMarket(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete aircraft type
     * @param {string} aircraft 
     * @param {Jwt} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointsApi
     */
    public deleteAircraftType(aircraft: string, body?: Jwt, options?: any) {
        return CategoryEndpointsApiFp(this.configuration).deleteAircraftType(aircraft, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete business company type
     * @param {string} bct 
     * @param {Jwt} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointsApi
     */
    public deleteBct(bct: string, body?: Jwt, options?: any) {
        return CategoryEndpointsApiFp(this.configuration).deleteBct(bct, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete category
     * @param {string} embCategoryId 
     * @param {Jwt} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointsApi
     */
    public deleteCategory(embCategoryId: string, body?: Jwt, options?: any) {
        return CategoryEndpointsApiFp(this.configuration).deleteCategory(embCategoryId, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete market
     * @param {string} market 
     * @param {Jwt} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointsApi
     */
    public deleteMarket(market: string, body?: Jwt, options?: any) {
        return CategoryEndpointsApiFp(this.configuration).deleteMarket(market, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get all aircraft types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointsApi
     */
    public getAllAircraftTypes(options?: any) {
        return CategoryEndpointsApiFp(this.configuration).getAllAircraftTypes(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get all business company types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointsApi
     */
    public getAllBcts(options?: any) {
        return CategoryEndpointsApiFp(this.configuration).getAllBcts(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get all categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointsApi
     */
    public getAllCategories(options?: any) {
        return CategoryEndpointsApiFp(this.configuration).getAllCategories(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get all markets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointsApi
     */
    public getAllMarkets(options?: any) {
        return CategoryEndpointsApiFp(this.configuration).getAllMarkets(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get categories from company
     * @param {string} embCompanyCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointsApi
     */
    public getCategoriesFromCompany(embCompanyCode: string, options?: any) {
        return CategoryEndpointsApiFp(this.configuration).getCategoriesFromCompany(embCompanyCode, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get category
     * @param {string} categoryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointsApi
     */
    public getCategory(categoryId: string, options?: any) {
        return CategoryEndpointsApiFp(this.configuration).getCategory(categoryId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get markets and aircrafts by bct and market
     * @param {string} bct 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointsApi
     */
    public getMarketsAndAircraftByBctAndMarket(bct: string, market?: string, options?: any) {
        return CategoryEndpointsApiFp(this.configuration).getMarketsAndAircraftByBctAndMarket(bct, market, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Remove categories from company
     * @param {CategoryCompanyBody1} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointsApi
     */
    public removeCategoryToCompany(body: CategoryCompanyBody1, options?: any) {
        return CategoryEndpointsApiFp(this.configuration).removeCategoryToCompany(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update aircraft type
     * @param {CategoryAircraftBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointsApi
     */
    public updateAircraftType(body: CategoryAircraftBody, options?: any) {
        return CategoryEndpointsApiFp(this.configuration).updateAircraftType(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update business company type
     * @param {CategoryBctBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointsApi
     */
    public updateBct(body: CategoryBctBody, options?: any) {
        return CategoryEndpointsApiFp(this.configuration).updateBct(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update category
     * @param {CategoryBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointsApi
     */
    public updateCategory(body: CategoryBody, options?: any) {
        return CategoryEndpointsApiFp(this.configuration).updateCategory(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update market
     * @param {CategoryMarketBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryEndpointsApi
     */
    public updateMarket(body: CategoryMarketBody, options?: any) {
        return CategoryEndpointsApiFp(this.configuration).updateMarket(body, options)(this.fetch, this.basePath);
    }

}
/**
 * CepEndpointsApi - fetch parameter creator
 * @export
 */
export const CepEndpointsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a list of countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountries(options: any = {}): FetchArgs {
            const localVarPath = `/country`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get ddis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDdis(options: any = {}): FetchArgs {
            const localVarPath = `/country/ddi`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CepEndpointsApi - functional programming interface
 * @export
 */
export const CepEndpointsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a list of countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountries(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Country>> {
            const localVarFetchArgs = CepEndpointsApiFetchParamCreator(configuration).getCountries(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get ddis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDdis(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Country>> {
            const localVarFetchArgs = CepEndpointsApiFetchParamCreator(configuration).getDdis(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CepEndpointsApi - factory interface
 * @export
 */
export const CepEndpointsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Get a list of countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountries(options?: any) {
            return CepEndpointsApiFp(configuration).getCountries(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get ddis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDdis(options?: any) {
            return CepEndpointsApiFp(configuration).getDdis(options)(fetch, basePath);
        },
    };
};

/**
 * CepEndpointsApi - object-oriented interface
 * @export
 * @class CepEndpointsApi
 * @extends {BaseAPI}
 */
export class CepEndpointsApi extends BaseAPI {
    /**
     * 
     * @summary Get a list of countries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CepEndpointsApi
     */
    public getCountries(options?: any) {
        return CepEndpointsApiFp(this.configuration).getCountries(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get ddis
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CepEndpointsApi
     */
    public getDdis(options?: any) {
        return CepEndpointsApiFp(this.configuration).getDdis(options)(this.fetch, this.basePath);
    }

}
/**
 * CompanyEndpointsApi - fetch parameter creator
 * @export
 */
export const CompanyEndpointsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create company
         * @param {CompanyDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCompany(body: CompanyDTO, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createCompany.');
            }
            const localVarPath = `/company`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CompanyDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get companies by application
         * @param {string} embCompanyResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompaniesByApplication(embCompanyResource: string, options: any = {}): FetchArgs {
            // verify required parameter 'embCompanyResource' is not null or undefined
            if (embCompanyResource === null || embCompanyResource === undefined) {
                throw new RequiredError('embCompanyResource','Required parameter embCompanyResource was null or undefined when calling getCompaniesByApplication.');
            }
            const localVarPath = `/company/application`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (embCompanyResource !== undefined) {
                localVarQueryParameter['embCompanyResource'] = embCompanyResource;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get companies by name
         * @param {string} displayName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompaniesByName(displayName: string, options: any = {}): FetchArgs {
            // verify required parameter 'displayName' is not null or undefined
            if (displayName === null || displayName === undefined) {
                throw new RequiredError('displayName','Required parameter displayName was null or undefined when calling getCompaniesByName.');
            }
            const localVarPath = `/company/name`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (displayName !== undefined) {
                localVarQueryParameter['displayName'] = displayName;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get companies by object
         * @param {string} [embCompanyCode] 
         * @param {string} [displayName] 
         * @param {string} [embStatus] 
         * @param {string} [streetAddress] 
         * @param {string} [location] 
         * @param {string} [country] 
         * @param {string} [postalCode] 
         * @param {string} [applicationDm] 
         * @param {string} [serviceDn] 
         * @param {string} [bct] 
         * @param {string} [market] 
         * @param {string} [aircraftType] 
         * @param {string} [adminDisplayName] 
         * @param {string} [adminEmbStatus] 
         * @param {string} [adminEmail] 
         * @param {string} [adminEmail2] 
         * @param {string} [adminTelephoneNumber] 
         * @param {string} [adminExtensionTelephone] 
         * @param {string} [approvalName] 
         * @param {Date} [approvalDate] 
         * @param {Date} [creationDate] 
         * @param {Date} [lastDateStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompaniesByObject(embCompanyCode?: string, displayName?: string, embStatus?: string, streetAddress?: string, location?: string, country?: string, postalCode?: string, applicationDm?: string, serviceDn?: string, bct?: string, market?: string, aircraftType?: string, adminDisplayName?: string, adminEmbStatus?: string, adminEmail?: string, adminEmail2?: string, adminTelephoneNumber?: string, adminExtensionTelephone?: string, approvalName?: string, approvalDate?: Date, creationDate?: Date, lastDateStatus?: Date, options: any = {}): FetchArgs {
            const localVarPath = `/company/object`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (embCompanyCode !== undefined) {
                localVarQueryParameter['embCompanyCode'] = embCompanyCode;
            }

            if (displayName !== undefined) {
                localVarQueryParameter['displayName'] = displayName;
            }

            if (embStatus !== undefined) {
                localVarQueryParameter['embStatus'] = embStatus;
            }

            if (streetAddress !== undefined) {
                localVarQueryParameter['streetAddress'] = streetAddress;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (postalCode !== undefined) {
                localVarQueryParameter['postalCode'] = postalCode;
            }

            if (applicationDm !== undefined) {
                localVarQueryParameter['applicationDm'] = applicationDm;
            }

            if (serviceDn !== undefined) {
                localVarQueryParameter['serviceDn'] = serviceDn;
            }

            if (bct !== undefined) {
                localVarQueryParameter['bct'] = bct;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (aircraftType !== undefined) {
                localVarQueryParameter['aircraftType'] = aircraftType;
            }

            if (adminDisplayName !== undefined) {
                localVarQueryParameter['adminDisplayName'] = adminDisplayName;
            }

            if (adminEmbStatus !== undefined) {
                localVarQueryParameter['adminEmbStatus'] = adminEmbStatus;
            }

            if (adminEmail !== undefined) {
                localVarQueryParameter['adminEmail'] = adminEmail;
            }

            if (adminEmail2 !== undefined) {
                localVarQueryParameter['adminEmail2'] = adminEmail2;
            }

            if (adminTelephoneNumber !== undefined) {
                localVarQueryParameter['adminTelephoneNumber'] = adminTelephoneNumber;
            }

            if (adminExtensionTelephone !== undefined) {
                localVarQueryParameter['adminExtensionTelephone'] = adminExtensionTelephone;
            }

            if (approvalName !== undefined) {
                localVarQueryParameter['approvalName'] = approvalName;
            }

            if (approvalDate !== undefined) {
                localVarQueryParameter['approvalDate'] = (approvalDate as any).toISOString();
            }

            if (creationDate !== undefined) {
                localVarQueryParameter['creationDate'] = (creationDate as any).toISOString();
            }

            if (lastDateStatus !== undefined) {
                localVarQueryParameter['lastDateStatus'] = (lastDateStatus as any).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get company
         * @param {string} embCompanyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompany(embCompanyCode: string, options: any = {}): FetchArgs {
            // verify required parameter 'embCompanyCode' is not null or undefined
            if (embCompanyCode === null || embCompanyCode === undefined) {
                throw new RequiredError('embCompanyCode','Required parameter embCompanyCode was null or undefined when calling getCompany.');
            }
            const localVarPath = `/company/{embCompanyCode}`
                .replace(`{${"embCompanyCode"}}`, encodeURIComponent(String(embCompanyCode)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get company admin from company
         * @param {string} embCompanyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyAdminFromCompany(embCompanyCode: string, options: any = {}): FetchArgs {
            // verify required parameter 'embCompanyCode' is not null or undefined
            if (embCompanyCode === null || embCompanyCode === undefined) {
                throw new RequiredError('embCompanyCode','Required parameter embCompanyCode was null or undefined when calling getCompanyAdminFromCompany.');
            }
            const localVarPath = `/company/admin/{embCompanyCode}`
                .replace(`{${"embCompanyCode"}}`, encodeURIComponent(String(embCompanyCode)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get companies from user
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyFromUser(username: string, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling getCompanyFromUser.');
            }
            const localVarPath = `/company/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update company
         * @param {CompanyBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCompany(body: CompanyBody, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateCompany.');
            }
            const localVarPath = `/company`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CompanyBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyEndpointsApi - functional programming interface
 * @export
 */
export const CompanyEndpointsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create company
         * @param {CompanyDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCompany(body: CompanyDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CreateResponse> {
            const localVarFetchArgs = CompanyEndpointsApiFetchParamCreator(configuration).createCompany(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get companies by application
         * @param {string} embCompanyResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompaniesByApplication(embCompanyResource: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Company>> {
            const localVarFetchArgs = CompanyEndpointsApiFetchParamCreator(configuration).getCompaniesByApplication(embCompanyResource, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get companies by name
         * @param {string} displayName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompaniesByName(displayName: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CompanyExistsDTO> {
            const localVarFetchArgs = CompanyEndpointsApiFetchParamCreator(configuration).getCompaniesByName(displayName, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get companies by object
         * @param {string} [embCompanyCode] 
         * @param {string} [displayName] 
         * @param {string} [embStatus] 
         * @param {string} [streetAddress] 
         * @param {string} [location] 
         * @param {string} [country] 
         * @param {string} [postalCode] 
         * @param {string} [applicationDm] 
         * @param {string} [serviceDn] 
         * @param {string} [bct] 
         * @param {string} [market] 
         * @param {string} [aircraftType] 
         * @param {string} [adminDisplayName] 
         * @param {string} [adminEmbStatus] 
         * @param {string} [adminEmail] 
         * @param {string} [adminEmail2] 
         * @param {string} [adminTelephoneNumber] 
         * @param {string} [adminExtensionTelephone] 
         * @param {string} [approvalName] 
         * @param {Date} [approvalDate] 
         * @param {Date} [creationDate] 
         * @param {Date} [lastDateStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompaniesByObject(embCompanyCode?: string, displayName?: string, embStatus?: string, streetAddress?: string, location?: string, country?: string, postalCode?: string, applicationDm?: string, serviceDn?: string, bct?: string, market?: string, aircraftType?: string, adminDisplayName?: string, adminEmbStatus?: string, adminEmail?: string, adminEmail2?: string, adminTelephoneNumber?: string, adminExtensionTelephone?: string, approvalName?: string, approvalDate?: Date, creationDate?: Date, lastDateStatus?: Date, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<CompanyObject>> {
            const localVarFetchArgs = CompanyEndpointsApiFetchParamCreator(configuration).getCompaniesByObject(embCompanyCode, displayName, embStatus, streetAddress, location, country, postalCode, applicationDm, serviceDn, bct, market, aircraftType, adminDisplayName, adminEmbStatus, adminEmail, adminEmail2, adminTelephoneNumber, adminExtensionTelephone, approvalName, approvalDate, creationDate, lastDateStatus, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get company
         * @param {string} embCompanyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompany(embCompanyCode: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Company> {
            const localVarFetchArgs = CompanyEndpointsApiFetchParamCreator(configuration).getCompany(embCompanyCode, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get company admin from company
         * @param {string} embCompanyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyAdminFromCompany(embCompanyCode: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {
            const localVarFetchArgs = CompanyEndpointsApiFetchParamCreator(configuration).getCompanyAdminFromCompany(embCompanyCode, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get companies from user
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyFromUser(username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Company>> {
            const localVarFetchArgs = CompanyEndpointsApiFetchParamCreator(configuration).getCompanyFromUser(username, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update company
         * @param {CompanyBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCompany(body: CompanyBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = CompanyEndpointsApiFetchParamCreator(configuration).updateCompany(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CompanyEndpointsApi - factory interface
 * @export
 */
export const CompanyEndpointsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create company
         * @param {CompanyDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCompany(body: CompanyDTO, options?: any) {
            return CompanyEndpointsApiFp(configuration).createCompany(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get companies by application
         * @param {string} embCompanyResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompaniesByApplication(embCompanyResource: string, options?: any) {
            return CompanyEndpointsApiFp(configuration).getCompaniesByApplication(embCompanyResource, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get companies by name
         * @param {string} displayName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompaniesByName(displayName: string, options?: any) {
            return CompanyEndpointsApiFp(configuration).getCompaniesByName(displayName, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get companies by object
         * @param {string} [embCompanyCode] 
         * @param {string} [displayName] 
         * @param {string} [embStatus] 
         * @param {string} [streetAddress] 
         * @param {string} [location] 
         * @param {string} [country] 
         * @param {string} [postalCode] 
         * @param {string} [applicationDm] 
         * @param {string} [serviceDn] 
         * @param {string} [bct] 
         * @param {string} [market] 
         * @param {string} [aircraftType] 
         * @param {string} [adminDisplayName] 
         * @param {string} [adminEmbStatus] 
         * @param {string} [adminEmail] 
         * @param {string} [adminEmail2] 
         * @param {string} [adminTelephoneNumber] 
         * @param {string} [adminExtensionTelephone] 
         * @param {string} [approvalName] 
         * @param {Date} [approvalDate] 
         * @param {Date} [creationDate] 
         * @param {Date} [lastDateStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompaniesByObject(embCompanyCode?: string, displayName?: string, embStatus?: string, streetAddress?: string, location?: string, country?: string, postalCode?: string, applicationDm?: string, serviceDn?: string, bct?: string, market?: string, aircraftType?: string, adminDisplayName?: string, adminEmbStatus?: string, adminEmail?: string, adminEmail2?: string, adminTelephoneNumber?: string, adminExtensionTelephone?: string, approvalName?: string, approvalDate?: Date, creationDate?: Date, lastDateStatus?: Date, options?: any) {
            return CompanyEndpointsApiFp(configuration).getCompaniesByObject(embCompanyCode, displayName, embStatus, streetAddress, location, country, postalCode, applicationDm, serviceDn, bct, market, aircraftType, adminDisplayName, adminEmbStatus, adminEmail, adminEmail2, adminTelephoneNumber, adminExtensionTelephone, approvalName, approvalDate, creationDate, lastDateStatus, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get company
         * @param {string} embCompanyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompany(embCompanyCode: string, options?: any) {
            return CompanyEndpointsApiFp(configuration).getCompany(embCompanyCode, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get company admin from company
         * @param {string} embCompanyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyAdminFromCompany(embCompanyCode: string, options?: any) {
            return CompanyEndpointsApiFp(configuration).getCompanyAdminFromCompany(embCompanyCode, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get companies from user
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyFromUser(username: string, options?: any) {
            return CompanyEndpointsApiFp(configuration).getCompanyFromUser(username, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update company
         * @param {CompanyBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCompany(body: CompanyBody, options?: any) {
            return CompanyEndpointsApiFp(configuration).updateCompany(body, options)(fetch, basePath);
        },
    };
};

/**
 * CompanyEndpointsApi - object-oriented interface
 * @export
 * @class CompanyEndpointsApi
 * @extends {BaseAPI}
 */
export class CompanyEndpointsApi extends BaseAPI {
    /**
     * 
     * @summary Create company
     * @param {CompanyDTO} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyEndpointsApi
     */
    public createCompany(body: CompanyDTO, options?: any) {
        return CompanyEndpointsApiFp(this.configuration).createCompany(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get companies by application
     * @param {string} embCompanyResource 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyEndpointsApi
     */
    public getCompaniesByApplication(embCompanyResource: string, options?: any) {
        return CompanyEndpointsApiFp(this.configuration).getCompaniesByApplication(embCompanyResource, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get companies by name
     * @param {string} displayName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyEndpointsApi
     */
    public getCompaniesByName(displayName: string, options?: any) {
        return CompanyEndpointsApiFp(this.configuration).getCompaniesByName(displayName, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get companies by object
     * @param {string} [embCompanyCode] 
     * @param {string} [displayName] 
     * @param {string} [embStatus] 
     * @param {string} [streetAddress] 
     * @param {string} [location] 
     * @param {string} [country] 
     * @param {string} [postalCode] 
     * @param {string} [applicationDm] 
     * @param {string} [serviceDn] 
     * @param {string} [bct] 
     * @param {string} [market] 
     * @param {string} [aircraftType] 
     * @param {string} [adminDisplayName] 
     * @param {string} [adminEmbStatus] 
     * @param {string} [adminEmail] 
     * @param {string} [adminEmail2] 
     * @param {string} [adminTelephoneNumber] 
     * @param {string} [adminExtensionTelephone] 
     * @param {string} [approvalName] 
     * @param {Date} [approvalDate] 
     * @param {Date} [creationDate] 
     * @param {Date} [lastDateStatus] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyEndpointsApi
     */
    public getCompaniesByObject(embCompanyCode?: string, displayName?: string, embStatus?: string, streetAddress?: string, location?: string, country?: string, postalCode?: string, applicationDm?: string, serviceDn?: string, bct?: string, market?: string, aircraftType?: string, adminDisplayName?: string, adminEmbStatus?: string, adminEmail?: string, adminEmail2?: string, adminTelephoneNumber?: string, adminExtensionTelephone?: string, approvalName?: string, approvalDate?: Date, creationDate?: Date, lastDateStatus?: Date, options?: any) {
        return CompanyEndpointsApiFp(this.configuration).getCompaniesByObject(embCompanyCode, displayName, embStatus, streetAddress, location, country, postalCode, applicationDm, serviceDn, bct, market, aircraftType, adminDisplayName, adminEmbStatus, adminEmail, adminEmail2, adminTelephoneNumber, adminExtensionTelephone, approvalName, approvalDate, creationDate, lastDateStatus, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get company
     * @param {string} embCompanyCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyEndpointsApi
     */
    public getCompany(embCompanyCode: string, options?: any) {
        return CompanyEndpointsApiFp(this.configuration).getCompany(embCompanyCode, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get company admin from company
     * @param {string} embCompanyCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyEndpointsApi
     */
    public getCompanyAdminFromCompany(embCompanyCode: string, options?: any) {
        return CompanyEndpointsApiFp(this.configuration).getCompanyAdminFromCompany(embCompanyCode, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get companies from user
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyEndpointsApi
     */
    public getCompanyFromUser(username: string, options?: any) {
        return CompanyEndpointsApiFp(this.configuration).getCompanyFromUser(username, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update company
     * @param {CompanyBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyEndpointsApi
     */
    public updateCompany(body: CompanyBody, options?: any) {
        return CompanyEndpointsApiFp(this.configuration).updateCompany(body, options)(this.fetch, this.basePath);
    }

}
/**
 * ContactUsEndpointsApi - fetch parameter creator
 * @export
 */
export const ContactUsEndpointsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Contact Us
         * @param {ContactUsPayload} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactUs(payload: ContactUsPayload, options: any = {}): FetchArgs {
            // verify required parameter 'payload' is not null or undefined
            if (payload === null || payload === undefined) {
                throw new RequiredError('payload','Required parameter payload was null or undefined when calling contactUs.');
            }
            const localVarPath = `/contactUs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (payload !== undefined) {
                localVarQueryParameter['payload'] = payload;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContactUsEndpointsApi - functional programming interface
 * @export
 */
export const ContactUsEndpointsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Contact Us
         * @param {ContactUsPayload} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactUs(payload: ContactUsPayload, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = ContactUsEndpointsApiFetchParamCreator(configuration).contactUs(payload, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ContactUsEndpointsApi - factory interface
 * @export
 */
export const ContactUsEndpointsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Contact Us
         * @param {ContactUsPayload} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactUs(payload: ContactUsPayload, options?: any) {
            return ContactUsEndpointsApiFp(configuration).contactUs(payload, options)(fetch, basePath);
        },
    };
};

/**
 * ContactUsEndpointsApi - object-oriented interface
 * @export
 * @class ContactUsEndpointsApi
 * @extends {BaseAPI}
 */
export class ContactUsEndpointsApi extends BaseAPI {
    /**
     * 
     * @summary Contact Us
     * @param {ContactUsPayload} payload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactUsEndpointsApi
     */
    public contactUs(payload: ContactUsPayload, options?: any) {
        return ContactUsEndpointsApiFp(this.configuration).contactUs(payload, options)(this.fetch, this.basePath);
    }

}
/**
 * ContractEndpointsApi - fetch parameter creator
 * @export
 */
export const ContractEndpointsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List file
         * @param {string} filename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFile(filename: string, options: any = {}): FetchArgs {
            // verify required parameter 'filename' is not null or undefined
            if (filename === null || filename === undefined) {
                throw new RequiredError('filename','Required parameter filename was null or undefined when calling getFile.');
            }
            const localVarPath = `/contract/files/{filename}`
                .replace(`{${"filename"}}`, encodeURIComponent(String(filename)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all files
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListFiles(options: any = {}): FetchArgs {
            const localVarPath = `/contract/files`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload document
         * @param {Blob} [document] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadDocument(document?: Blob, options: any = {}): FetchArgs {
            const localVarPath = `/contract/upload`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (document !== undefined) {
                localVarFormParams.set('document', document as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContractEndpointsApi - functional programming interface
 * @export
 */
export const ContractEndpointsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List file
         * @param {string} filename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFile(filename: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Blob> {
            const localVarFetchArgs = ContractEndpointsApiFetchParamCreator(configuration).getFile(filename, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List all files
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListFiles(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<FileInfo>> {
            const localVarFetchArgs = ContractEndpointsApiFetchParamCreator(configuration).getListFiles(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Upload document
         * @param {Blob} [document] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadDocument(document?: Blob, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = ContractEndpointsApiFetchParamCreator(configuration).uploadDocument(document, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ContractEndpointsApi - factory interface
 * @export
 */
export const ContractEndpointsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary List file
         * @param {string} filename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFile(filename: string, options?: any) {
            return ContractEndpointsApiFp(configuration).getFile(filename, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List all files
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListFiles(options?: any) {
            return ContractEndpointsApiFp(configuration).getListFiles(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Upload document
         * @param {Blob} [document] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadDocument(document?: Blob, options?: any) {
            return ContractEndpointsApiFp(configuration).uploadDocument(document, options)(fetch, basePath);
        },
    };
};

/**
 * ContractEndpointsApi - object-oriented interface
 * @export
 * @class ContractEndpointsApi
 * @extends {BaseAPI}
 */
export class ContractEndpointsApi extends BaseAPI {
    /**
     * 
     * @summary List file
     * @param {string} filename 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractEndpointsApi
     */
    public getFile(filename: string, options?: any) {
        return ContractEndpointsApiFp(this.configuration).getFile(filename, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List all files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractEndpointsApi
     */
    public getListFiles(options?: any) {
        return ContractEndpointsApiFp(this.configuration).getListFiles(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Upload document
     * @param {Blob} [document] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractEndpointsApi
     */
    public uploadDocument(document?: Blob, options?: any) {
        return ContractEndpointsApiFp(this.configuration).uploadDocument(document, options)(this.fetch, this.basePath);
    }

}
/**
 * EmailEndpointsApi - fetch parameter creator
 * @export
 */
export const EmailEndpointsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get email template
         * @param {string} templateCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailTemplate(templateCode: string, options: any = {}): FetchArgs {
            // verify required parameter 'templateCode' is not null or undefined
            if (templateCode === null || templateCode === undefined) {
                throw new RequiredError('templateCode','Required parameter templateCode was null or undefined when calling getEmailTemplate.');
            }
            const localVarPath = `/email/template/{templateCode}`
                .replace(`{${"templateCode"}}`, encodeURIComponent(String(templateCode)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send email
         * @param {EmailPayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessage(body: EmailPayload, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling sendMessage.');
            }
            const localVarPath = `/email`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EmailPayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmailEndpointsApi - functional programming interface
 * @export
 */
export const EmailEndpointsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get email template
         * @param {string} templateCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailTemplate(templateCode: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Email> {
            const localVarFetchArgs = EmailEndpointsApiFetchParamCreator(configuration).getEmailTemplate(templateCode, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Send email
         * @param {EmailPayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessage(body: EmailPayload, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = EmailEndpointsApiFetchParamCreator(configuration).sendMessage(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * EmailEndpointsApi - factory interface
 * @export
 */
export const EmailEndpointsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Get email template
         * @param {string} templateCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailTemplate(templateCode: string, options?: any) {
            return EmailEndpointsApiFp(configuration).getEmailTemplate(templateCode, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Send email
         * @param {EmailPayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessage(body: EmailPayload, options?: any) {
            return EmailEndpointsApiFp(configuration).sendMessage(body, options)(fetch, basePath);
        },
    };
};

/**
 * EmailEndpointsApi - object-oriented interface
 * @export
 * @class EmailEndpointsApi
 * @extends {BaseAPI}
 */
export class EmailEndpointsApi extends BaseAPI {
    /**
     * 
     * @summary Get email template
     * @param {string} templateCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailEndpointsApi
     */
    public getEmailTemplate(templateCode: string, options?: any) {
        return EmailEndpointsApiFp(this.configuration).getEmailTemplate(templateCode, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Send email
     * @param {EmailPayload} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailEndpointsApi
     */
    public sendMessage(body: EmailPayload, options?: any) {
        return EmailEndpointsApiFp(this.configuration).sendMessage(body, options)(this.fetch, this.basePath);
    }

}
/**
 * ExportEndpointsApi - fetch parameter creator
 * @export
 */
export const ExportEndpointsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Export user records
         * @param {string} [userCn] 
         * @param {string} [userDisplayName] 
         * @param {string} [userEmbStatus] 
         * @param {string} [userEmbProfile] 
         * @param {string} [userMail] 
         * @param {string} [userMail2] 
         * @param {string} [userTelephoneNumber] 
         * @param {string} [userExtensionTelephoneNumber] 
         * @param {string} [userSecondaryPhone] 
         * @param {string} [applicationDn] 
         * @param {string} [serviceDn] 
         * @param {string} [companyDisplayName] 
         * @param {string} [companyEmbStatus] 
         * @param {string} [companyAddress] 
         * @param {string} [companyCountry] 
         * @param {string} [companyLocation] 
         * @param {string} [userEmbApprovalName] 
         * @param {Date} [userEmbApprovalDate] 
         * @param {Date} [creationDate] 
         * @param {Date} [lastUpdateDate] 
         * @param {string} [bct] 
         * @param {string} [market] 
         * @param {string} [aircraftType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportUserRecords(userCn?: string, userDisplayName?: string, userEmbStatus?: string, userEmbProfile?: string, userMail?: string, userMail2?: string, userTelephoneNumber?: string, userExtensionTelephoneNumber?: string, userSecondaryPhone?: string, applicationDn?: string, serviceDn?: string, companyDisplayName?: string, companyEmbStatus?: string, companyAddress?: string, companyCountry?: string, companyLocation?: string, userEmbApprovalName?: string, userEmbApprovalDate?: Date, creationDate?: Date, lastUpdateDate?: Date, bct?: string, market?: string, aircraftType?: string, options: any = {}): FetchArgs {
            const localVarPath = `/export/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userCn !== undefined) {
                localVarQueryParameter['userCn'] = userCn;
            }

            if (userDisplayName !== undefined) {
                localVarQueryParameter['userDisplayName'] = userDisplayName;
            }

            if (userEmbStatus !== undefined) {
                localVarQueryParameter['userEmbStatus'] = userEmbStatus;
            }

            if (userEmbProfile !== undefined) {
                localVarQueryParameter['userEmbProfile'] = userEmbProfile;
            }

            if (userMail !== undefined) {
                localVarQueryParameter['userMail'] = userMail;
            }

            if (userMail2 !== undefined) {
                localVarQueryParameter['userMail2'] = userMail2;
            }

            if (userTelephoneNumber !== undefined) {
                localVarQueryParameter['userTelephoneNumber'] = userTelephoneNumber;
            }

            if (userExtensionTelephoneNumber !== undefined) {
                localVarQueryParameter['userExtensionTelephoneNumber'] = userExtensionTelephoneNumber;
            }

            if (userSecondaryPhone !== undefined) {
                localVarQueryParameter['userSecondaryPhone'] = userSecondaryPhone;
            }

            if (applicationDn !== undefined) {
                localVarQueryParameter['applicationDn'] = applicationDn;
            }

            if (serviceDn !== undefined) {
                localVarQueryParameter['serviceDn'] = serviceDn;
            }

            if (companyDisplayName !== undefined) {
                localVarQueryParameter['companyDisplayName'] = companyDisplayName;
            }

            if (companyEmbStatus !== undefined) {
                localVarQueryParameter['companyEmbStatus'] = companyEmbStatus;
            }

            if (companyAddress !== undefined) {
                localVarQueryParameter['companyAddress'] = companyAddress;
            }

            if (companyCountry !== undefined) {
                localVarQueryParameter['companyCountry'] = companyCountry;
            }

            if (companyLocation !== undefined) {
                localVarQueryParameter['companyLocation'] = companyLocation;
            }

            if (userEmbApprovalName !== undefined) {
                localVarQueryParameter['userEmbApprovalName'] = userEmbApprovalName;
            }

            if (userEmbApprovalDate !== undefined) {
                localVarQueryParameter['userEmbApprovalDate'] = (userEmbApprovalDate as any).toISOString();
            }

            if (creationDate !== undefined) {
                localVarQueryParameter['creationDate'] = (creationDate as any).toISOString();
            }

            if (lastUpdateDate !== undefined) {
                localVarQueryParameter['lastUpdateDate'] = (lastUpdateDate as any).toISOString();
            }

            if (bct !== undefined) {
                localVarQueryParameter['bct'] = bct;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (aircraftType !== undefined) {
                localVarQueryParameter['aircraftType'] = aircraftType;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Export company records
         * @param {string} [embCompanyCode] 
         * @param {string} [displayName] 
         * @param {string} [embStatus] 
         * @param {string} [streetAddress] 
         * @param {string} [location] 
         * @param {string} [country] 
         * @param {string} [postalCode] 
         * @param {string} [applicationDm] 
         * @param {string} [serviceDn] 
         * @param {string} [bct] 
         * @param {string} [market] 
         * @param {string} [aircraftType] 
         * @param {string} [adminDisplayName] 
         * @param {string} [adminEmbStatus] 
         * @param {string} [adminEmail] 
         * @param {string} [adminEmail2] 
         * @param {string} [adminTelephoneNumber] 
         * @param {string} [adminExtensionTelephone] 
         * @param {string} [approvalName] 
         * @param {Date} [approvalDate] 
         * @param {Date} [creationDate] 
         * @param {Date} [lastDateStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportCompaniesByObject(embCompanyCode?: string, displayName?: string, embStatus?: string, streetAddress?: string, location?: string, country?: string, postalCode?: string, applicationDm?: string, serviceDn?: string, bct?: string, market?: string, aircraftType?: string, adminDisplayName?: string, adminEmbStatus?: string, adminEmail?: string, adminEmail2?: string, adminTelephoneNumber?: string, adminExtensionTelephone?: string, approvalName?: string, approvalDate?: Date, creationDate?: Date, lastDateStatus?: Date, options: any = {}): FetchArgs {
            const localVarPath = `/export/company`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (embCompanyCode !== undefined) {
                localVarQueryParameter['embCompanyCode'] = embCompanyCode;
            }

            if (displayName !== undefined) {
                localVarQueryParameter['displayName'] = displayName;
            }

            if (embStatus !== undefined) {
                localVarQueryParameter['embStatus'] = embStatus;
            }

            if (streetAddress !== undefined) {
                localVarQueryParameter['streetAddress'] = streetAddress;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (postalCode !== undefined) {
                localVarQueryParameter['postalCode'] = postalCode;
            }

            if (applicationDm !== undefined) {
                localVarQueryParameter['applicationDm'] = applicationDm;
            }

            if (serviceDn !== undefined) {
                localVarQueryParameter['serviceDn'] = serviceDn;
            }

            if (bct !== undefined) {
                localVarQueryParameter['bct'] = bct;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (aircraftType !== undefined) {
                localVarQueryParameter['aircraftType'] = aircraftType;
            }

            if (adminDisplayName !== undefined) {
                localVarQueryParameter['adminDisplayName'] = adminDisplayName;
            }

            if (adminEmbStatus !== undefined) {
                localVarQueryParameter['adminEmbStatus'] = adminEmbStatus;
            }

            if (adminEmail !== undefined) {
                localVarQueryParameter['adminEmail'] = adminEmail;
            }

            if (adminEmail2 !== undefined) {
                localVarQueryParameter['adminEmail2'] = adminEmail2;
            }

            if (adminTelephoneNumber !== undefined) {
                localVarQueryParameter['adminTelephoneNumber'] = adminTelephoneNumber;
            }

            if (adminExtensionTelephone !== undefined) {
                localVarQueryParameter['adminExtensionTelephone'] = adminExtensionTelephone;
            }

            if (approvalName !== undefined) {
                localVarQueryParameter['approvalName'] = approvalName;
            }

            if (approvalDate !== undefined) {
                localVarQueryParameter['approvalDate'] = (approvalDate as any).toISOString();
            }

            if (creationDate !== undefined) {
                localVarQueryParameter['creationDate'] = (creationDate as any).toISOString();
            }

            if (lastDateStatus !== undefined) {
                localVarQueryParameter['lastDateStatus'] = (lastDateStatus as any).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExportEndpointsApi - functional programming interface
 * @export
 */
export const ExportEndpointsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Export user records
         * @param {string} [userCn] 
         * @param {string} [userDisplayName] 
         * @param {string} [userEmbStatus] 
         * @param {string} [userEmbProfile] 
         * @param {string} [userMail] 
         * @param {string} [userMail2] 
         * @param {string} [userTelephoneNumber] 
         * @param {string} [userExtensionTelephoneNumber] 
         * @param {string} [userSecondaryPhone] 
         * @param {string} [applicationDn] 
         * @param {string} [serviceDn] 
         * @param {string} [companyDisplayName] 
         * @param {string} [companyEmbStatus] 
         * @param {string} [companyAddress] 
         * @param {string} [companyCountry] 
         * @param {string} [companyLocation] 
         * @param {string} [userEmbApprovalName] 
         * @param {Date} [userEmbApprovalDate] 
         * @param {Date} [creationDate] 
         * @param {Date} [lastUpdateDate] 
         * @param {string} [bct] 
         * @param {string} [market] 
         * @param {string} [aircraftType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportUserRecords(userCn?: string, userDisplayName?: string, userEmbStatus?: string, userEmbProfile?: string, userMail?: string, userMail2?: string, userTelephoneNumber?: string, userExtensionTelephoneNumber?: string, userSecondaryPhone?: string, applicationDn?: string, serviceDn?: string, companyDisplayName?: string, companyEmbStatus?: string, companyAddress?: string, companyCountry?: string, companyLocation?: string, userEmbApprovalName?: string, userEmbApprovalDate?: Date, creationDate?: Date, lastUpdateDate?: Date, bct?: string, market?: string, aircraftType?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ExportEndpointsApiFetchParamCreator(configuration).exportUserRecords(userCn, userDisplayName, userEmbStatus, userEmbProfile, userMail, userMail2, userTelephoneNumber, userExtensionTelephoneNumber, userSecondaryPhone, applicationDn, serviceDn, companyDisplayName, companyEmbStatus, companyAddress, companyCountry, companyLocation, userEmbApprovalName, userEmbApprovalDate, creationDate, lastUpdateDate, bct, market, aircraftType, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Export company records
         * @param {string} [embCompanyCode] 
         * @param {string} [displayName] 
         * @param {string} [embStatus] 
         * @param {string} [streetAddress] 
         * @param {string} [location] 
         * @param {string} [country] 
         * @param {string} [postalCode] 
         * @param {string} [applicationDm] 
         * @param {string} [serviceDn] 
         * @param {string} [bct] 
         * @param {string} [market] 
         * @param {string} [aircraftType] 
         * @param {string} [adminDisplayName] 
         * @param {string} [adminEmbStatus] 
         * @param {string} [adminEmail] 
         * @param {string} [adminEmail2] 
         * @param {string} [adminTelephoneNumber] 
         * @param {string} [adminExtensionTelephone] 
         * @param {string} [approvalName] 
         * @param {Date} [approvalDate] 
         * @param {Date} [creationDate] 
         * @param {Date} [lastDateStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportCompaniesByObject(embCompanyCode?: string, displayName?: string, embStatus?: string, streetAddress?: string, location?: string, country?: string, postalCode?: string, applicationDm?: string, serviceDn?: string, bct?: string, market?: string, aircraftType?: string, adminDisplayName?: string, adminEmbStatus?: string, adminEmail?: string, adminEmail2?: string, adminTelephoneNumber?: string, adminExtensionTelephone?: string, approvalName?: string, approvalDate?: Date, creationDate?: Date, lastDateStatus?: Date, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ExportEndpointsApiFetchParamCreator(configuration).getReportCompaniesByObject(embCompanyCode, displayName, embStatus, streetAddress, location, country, postalCode, applicationDm, serviceDn, bct, market, aircraftType, adminDisplayName, adminEmbStatus, adminEmail, adminEmail2, adminTelephoneNumber, adminExtensionTelephone, approvalName, approvalDate, creationDate, lastDateStatus, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ExportEndpointsApi - factory interface
 * @export
 */
export const ExportEndpointsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Export user records
         * @param {string} [userCn] 
         * @param {string} [userDisplayName] 
         * @param {string} [userEmbStatus] 
         * @param {string} [userEmbProfile] 
         * @param {string} [userMail] 
         * @param {string} [userMail2] 
         * @param {string} [userTelephoneNumber] 
         * @param {string} [userExtensionTelephoneNumber] 
         * @param {string} [userSecondaryPhone] 
         * @param {string} [applicationDn] 
         * @param {string} [serviceDn] 
         * @param {string} [companyDisplayName] 
         * @param {string} [companyEmbStatus] 
         * @param {string} [companyAddress] 
         * @param {string} [companyCountry] 
         * @param {string} [companyLocation] 
         * @param {string} [userEmbApprovalName] 
         * @param {Date} [userEmbApprovalDate] 
         * @param {Date} [creationDate] 
         * @param {Date} [lastUpdateDate] 
         * @param {string} [bct] 
         * @param {string} [market] 
         * @param {string} [aircraftType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportUserRecords(userCn?: string, userDisplayName?: string, userEmbStatus?: string, userEmbProfile?: string, userMail?: string, userMail2?: string, userTelephoneNumber?: string, userExtensionTelephoneNumber?: string, userSecondaryPhone?: string, applicationDn?: string, serviceDn?: string, companyDisplayName?: string, companyEmbStatus?: string, companyAddress?: string, companyCountry?: string, companyLocation?: string, userEmbApprovalName?: string, userEmbApprovalDate?: Date, creationDate?: Date, lastUpdateDate?: Date, bct?: string, market?: string, aircraftType?: string, options?: any) {
            return ExportEndpointsApiFp(configuration).exportUserRecords(userCn, userDisplayName, userEmbStatus, userEmbProfile, userMail, userMail2, userTelephoneNumber, userExtensionTelephoneNumber, userSecondaryPhone, applicationDn, serviceDn, companyDisplayName, companyEmbStatus, companyAddress, companyCountry, companyLocation, userEmbApprovalName, userEmbApprovalDate, creationDate, lastUpdateDate, bct, market, aircraftType, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Export company records
         * @param {string} [embCompanyCode] 
         * @param {string} [displayName] 
         * @param {string} [embStatus] 
         * @param {string} [streetAddress] 
         * @param {string} [location] 
         * @param {string} [country] 
         * @param {string} [postalCode] 
         * @param {string} [applicationDm] 
         * @param {string} [serviceDn] 
         * @param {string} [bct] 
         * @param {string} [market] 
         * @param {string} [aircraftType] 
         * @param {string} [adminDisplayName] 
         * @param {string} [adminEmbStatus] 
         * @param {string} [adminEmail] 
         * @param {string} [adminEmail2] 
         * @param {string} [adminTelephoneNumber] 
         * @param {string} [adminExtensionTelephone] 
         * @param {string} [approvalName] 
         * @param {Date} [approvalDate] 
         * @param {Date} [creationDate] 
         * @param {Date} [lastDateStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportCompaniesByObject(embCompanyCode?: string, displayName?: string, embStatus?: string, streetAddress?: string, location?: string, country?: string, postalCode?: string, applicationDm?: string, serviceDn?: string, bct?: string, market?: string, aircraftType?: string, adminDisplayName?: string, adminEmbStatus?: string, adminEmail?: string, adminEmail2?: string, adminTelephoneNumber?: string, adminExtensionTelephone?: string, approvalName?: string, approvalDate?: Date, creationDate?: Date, lastDateStatus?: Date, options?: any) {
            return ExportEndpointsApiFp(configuration).getReportCompaniesByObject(embCompanyCode, displayName, embStatus, streetAddress, location, country, postalCode, applicationDm, serviceDn, bct, market, aircraftType, adminDisplayName, adminEmbStatus, adminEmail, adminEmail2, adminTelephoneNumber, adminExtensionTelephone, approvalName, approvalDate, creationDate, lastDateStatus, options)(fetch, basePath);
        },
    };
};

/**
 * ExportEndpointsApi - object-oriented interface
 * @export
 * @class ExportEndpointsApi
 * @extends {BaseAPI}
 */
export class ExportEndpointsApi extends BaseAPI {
    /**
     * 
     * @summary Export user records
     * @param {string} [userCn] 
     * @param {string} [userDisplayName] 
     * @param {string} [userEmbStatus] 
     * @param {string} [userEmbProfile] 
     * @param {string} [userMail] 
     * @param {string} [userMail2] 
     * @param {string} [userTelephoneNumber] 
     * @param {string} [userExtensionTelephoneNumber] 
     * @param {string} [userSecondaryPhone] 
     * @param {string} [applicationDn] 
     * @param {string} [serviceDn] 
     * @param {string} [companyDisplayName] 
     * @param {string} [companyEmbStatus] 
     * @param {string} [companyAddress] 
     * @param {string} [companyCountry] 
     * @param {string} [companyLocation] 
     * @param {string} [userEmbApprovalName] 
     * @param {Date} [userEmbApprovalDate] 
     * @param {Date} [creationDate] 
     * @param {Date} [lastUpdateDate] 
     * @param {string} [bct] 
     * @param {string} [market] 
     * @param {string} [aircraftType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExportEndpointsApi
     */
    public exportUserRecords(userCn?: string, userDisplayName?: string, userEmbStatus?: string, userEmbProfile?: string, userMail?: string, userMail2?: string, userTelephoneNumber?: string, userExtensionTelephoneNumber?: string, userSecondaryPhone?: string, applicationDn?: string, serviceDn?: string, companyDisplayName?: string, companyEmbStatus?: string, companyAddress?: string, companyCountry?: string, companyLocation?: string, userEmbApprovalName?: string, userEmbApprovalDate?: Date, creationDate?: Date, lastUpdateDate?: Date, bct?: string, market?: string, aircraftType?: string, options?: any) {
        return ExportEndpointsApiFp(this.configuration).exportUserRecords(userCn, userDisplayName, userEmbStatus, userEmbProfile, userMail, userMail2, userTelephoneNumber, userExtensionTelephoneNumber, userSecondaryPhone, applicationDn, serviceDn, companyDisplayName, companyEmbStatus, companyAddress, companyCountry, companyLocation, userEmbApprovalName, userEmbApprovalDate, creationDate, lastUpdateDate, bct, market, aircraftType, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Export company records
     * @param {string} [embCompanyCode] 
     * @param {string} [displayName] 
     * @param {string} [embStatus] 
     * @param {string} [streetAddress] 
     * @param {string} [location] 
     * @param {string} [country] 
     * @param {string} [postalCode] 
     * @param {string} [applicationDm] 
     * @param {string} [serviceDn] 
     * @param {string} [bct] 
     * @param {string} [market] 
     * @param {string} [aircraftType] 
     * @param {string} [adminDisplayName] 
     * @param {string} [adminEmbStatus] 
     * @param {string} [adminEmail] 
     * @param {string} [adminEmail2] 
     * @param {string} [adminTelephoneNumber] 
     * @param {string} [adminExtensionTelephone] 
     * @param {string} [approvalName] 
     * @param {Date} [approvalDate] 
     * @param {Date} [creationDate] 
     * @param {Date} [lastDateStatus] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExportEndpointsApi
     */
    public getReportCompaniesByObject(embCompanyCode?: string, displayName?: string, embStatus?: string, streetAddress?: string, location?: string, country?: string, postalCode?: string, applicationDm?: string, serviceDn?: string, bct?: string, market?: string, aircraftType?: string, adminDisplayName?: string, adminEmbStatus?: string, adminEmail?: string, adminEmail2?: string, adminTelephoneNumber?: string, adminExtensionTelephone?: string, approvalName?: string, approvalDate?: Date, creationDate?: Date, lastDateStatus?: Date, options?: any) {
        return ExportEndpointsApiFp(this.configuration).getReportCompaniesByObject(embCompanyCode, displayName, embStatus, streetAddress, location, country, postalCode, applicationDm, serviceDn, bct, market, aircraftType, adminDisplayName, adminEmbStatus, adminEmail, adminEmail2, adminTelephoneNumber, adminExtensionTelephone, approvalName, approvalDate, creationDate, lastDateStatus, options)(this.fetch, this.basePath);
    }

}
/**
 * ImpersonateEndpointsApi - fetch parameter creator
 * @export
 */
export const ImpersonateEndpointsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get users to impersonate
         * @param {string} [displayName] 
         * @param {string} [email] 
         * @param {string} [companyName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersToImpersonate(displayName?: string, email?: string, companyName?: string, options: any = {}): FetchArgs {
            const localVarPath = `/impersonate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (displayName !== undefined) {
                localVarQueryParameter['displayName'] = displayName;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (companyName !== undefined) {
                localVarQueryParameter['companyName'] = companyName;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Impersonate a user
         * @param {ImpersonateBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        impersonate(body: ImpersonateBody, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling impersonate.');
            }
            const localVarPath = `/impersonate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ImpersonateBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImpersonateEndpointsApi - functional programming interface
 * @export
 */
export const ImpersonateEndpointsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get users to impersonate
         * @param {string} [displayName] 
         * @param {string} [email] 
         * @param {string} [companyName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersToImpersonate(displayName?: string, email?: string, companyName?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ImpersonateUserResponse>> {
            const localVarFetchArgs = ImpersonateEndpointsApiFetchParamCreator(configuration).getUsersToImpersonate(displayName, email, companyName, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Impersonate a user
         * @param {ImpersonateBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        impersonate(body: ImpersonateBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = ImpersonateEndpointsApiFetchParamCreator(configuration).impersonate(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ImpersonateEndpointsApi - factory interface
 * @export
 */
export const ImpersonateEndpointsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Get users to impersonate
         * @param {string} [displayName] 
         * @param {string} [email] 
         * @param {string} [companyName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersToImpersonate(displayName?: string, email?: string, companyName?: string, options?: any) {
            return ImpersonateEndpointsApiFp(configuration).getUsersToImpersonate(displayName, email, companyName, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Impersonate a user
         * @param {ImpersonateBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        impersonate(body: ImpersonateBody, options?: any) {
            return ImpersonateEndpointsApiFp(configuration).impersonate(body, options)(fetch, basePath);
        },
    };
};

/**
 * ImpersonateEndpointsApi - object-oriented interface
 * @export
 * @class ImpersonateEndpointsApi
 * @extends {BaseAPI}
 */
export class ImpersonateEndpointsApi extends BaseAPI {
    /**
     * 
     * @summary Get users to impersonate
     * @param {string} [displayName] 
     * @param {string} [email] 
     * @param {string} [companyName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImpersonateEndpointsApi
     */
    public getUsersToImpersonate(displayName?: string, email?: string, companyName?: string, options?: any) {
        return ImpersonateEndpointsApiFp(this.configuration).getUsersToImpersonate(displayName, email, companyName, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Impersonate a user
     * @param {ImpersonateBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImpersonateEndpointsApi
     */
    public impersonate(body: ImpersonateBody, options?: any) {
        return ImpersonateEndpointsApiFp(this.configuration).impersonate(body, options)(this.fetch, this.basePath);
    }

}
/**
 * JobFunctionEndpointsApi - fetch parameter creator
 * @export
 */
export const JobFunctionEndpointsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add and remove service to user
         * @param {UserServiceAddRemovePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAndRemoveServiceToUser(body: UserServiceAddRemovePayload, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addAndRemoveServiceToUser.');
            }
            const localVarPath = `/service/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UserServiceAddRemovePayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add application to company
         * @param {CompanyApplicationPayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addApplicationToCompany(body: CompanyApplicationPayload, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addApplicationToCompany.');
            }
            const localVarPath = `/application/company`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CompanyApplicationPayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add service to category
         * @param {CategoryPayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addServiceToCategory(body: CategoryPayload, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addServiceToCategory.');
            }
            const localVarPath = `/service/category`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CategoryPayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add service to company
         * @param {CompanyServicePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addServiceToCompany(body: CompanyServicePayload, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addServiceToCompany.');
            }
            const localVarPath = `/service/company`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CompanyServicePayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add service to user
         * @param {UserServicePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addServiceToUser(body: UserServicePayload, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addServiceToUser.');
            }
            const localVarPath = `/service/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UserServicePayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Associate content admin to application
         * @param {ContentAdminAppPayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        associateContentAdminToApplication(body: ContentAdminAppPayload, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling associateContentAdminToApplication.');
            }
            const localVarPath = `/application/admin`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ContentAdminAppPayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create service
         * @param {ServicePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createService(body: ServicePayload, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createService.');
            }
            const localVarPath = `/service`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ServicePayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete content admin from application
         * @param {ContentAdminAppPayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContentAdminFromApplication(body: ContentAdminAppPayload, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling deleteContentAdminFromApplication.');
            }
            const localVarPath = `/application/admin`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ContentAdminAppPayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete service
         * @param {ServicePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteService(body: ServicePayload, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling deleteService.');
            }
            const localVarPath = `/service`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ServicePayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all applications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllApplications(options: any = {}): FetchArgs {
            const localVarPath = `/application`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all group access applications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllGroupAccessApplications(options: any = {}): FetchArgs {
            const localVarPath = `/application/group`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all services
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllServices(options: any = {}): FetchArgs {
            const localVarPath = `/service`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get applications from company
         * @param {string} embCompanyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationsFromCompany(embCompanyCode: string, options: any = {}): FetchArgs {
            // verify required parameter 'embCompanyCode' is not null or undefined
            if (embCompanyCode === null || embCompanyCode === undefined) {
                throw new RequiredError('embCompanyCode','Required parameter embCompanyCode was null or undefined when calling getApplicationsFromCompany.');
            }
            const localVarPath = `/application/company`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (embCompanyCode !== undefined) {
                localVarQueryParameter['embCompanyCode'] = embCompanyCode;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get applications from user
         * @param {string} userDn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationsFromUser(userDn: string, options: any = {}): FetchArgs {
            // verify required parameter 'userDn' is not null or undefined
            if (userDn === null || userDn === undefined) {
                throw new RequiredError('userDn','Required parameter userDn was null or undefined when calling getApplicationsFromUser.');
            }
            const localVarPath = `/application/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userDn !== undefined) {
                localVarQueryParameter['userDn'] = userDn;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get content admin applications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentAdminApplications(options: any = {}): FetchArgs {
            const localVarPath = `/application/admin`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get links applications from user
         * @param {Jwt} jwt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLinksApplicationsFromUser(jwt: Jwt, options: any = {}): FetchArgs {
            // verify required parameter 'jwt' is not null or undefined
            if (jwt === null || jwt === undefined) {
                throw new RequiredError('jwt','Required parameter jwt was null or undefined when calling getLinksApplicationsFromUser.');
            }
            const localVarPath = `/application/link`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (jwt !== undefined) {
                localVarQueryParameter['jwt'] = jwt;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get services from application
         * @param {string} applicationDn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServicesFromApplication(applicationDn: string, options: any = {}): FetchArgs {
            // verify required parameter 'applicationDn' is not null or undefined
            if (applicationDn === null || applicationDn === undefined) {
                throw new RequiredError('applicationDn','Required parameter applicationDn was null or undefined when calling getServicesFromApplication.');
            }
            const localVarPath = `/service/application`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (applicationDn !== undefined) {
                localVarQueryParameter['applicationDn'] = applicationDn;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get services from company
         * @param {string} embCompanyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServicesFromCompany(embCompanyCode: string, options: any = {}): FetchArgs {
            // verify required parameter 'embCompanyCode' is not null or undefined
            if (embCompanyCode === null || embCompanyCode === undefined) {
                throw new RequiredError('embCompanyCode','Required parameter embCompanyCode was null or undefined when calling getServicesFromCompany.');
            }
            const localVarPath = `/service/company`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (embCompanyCode !== undefined) {
                localVarQueryParameter['embCompanyCode'] = embCompanyCode;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get services from user
         * @param {string} userDn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServicesFromUser(userDn: string, options: any = {}): FetchArgs {
            // verify required parameter 'userDn' is not null or undefined
            if (userDn === null || userDn === undefined) {
                throw new RequiredError('userDn','Required parameter userDn was null or undefined when calling getServicesFromUser.');
            }
            const localVarPath = `/service/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userDn !== undefined) {
                localVarQueryParameter['userDn'] = userDn;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove application from company
         * @param {CompanyApplicationPayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeApplicationFromCompany(body: CompanyApplicationPayload, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling removeApplicationFromCompany.');
            }
            const localVarPath = `/application/company`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CompanyApplicationPayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove service from category
         * @param {CategoryPayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeServiceFromCategory(body: CategoryPayload, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling removeServiceFromCategory.');
            }
            const localVarPath = `/service/category`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CategoryPayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove service from company
         * @param {CompanyServicePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeServiceFromCompany(body: CompanyServicePayload, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling removeServiceFromCompany.');
            }
            const localVarPath = `/service/company`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CompanyServicePayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove service from user
         * @param {UserServicePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeServiceFromUser(body: UserServicePayload, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling removeServiceFromUser.');
            }
            const localVarPath = `/service/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UserServicePayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update service
         * @param {ServicePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateService(body: ServicePayload, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateService.');
            }
            const localVarPath = `/service`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ServicePayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobFunctionEndpointsApi - functional programming interface
 * @export
 */
export const JobFunctionEndpointsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add and remove service to user
         * @param {UserServiceAddRemovePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAndRemoveServiceToUser(body: UserServiceAddRemovePayload, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = JobFunctionEndpointsApiFetchParamCreator(configuration).addAndRemoveServiceToUser(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Add application to company
         * @param {CompanyApplicationPayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addApplicationToCompany(body: CompanyApplicationPayload, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = JobFunctionEndpointsApiFetchParamCreator(configuration).addApplicationToCompany(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Add service to category
         * @param {CategoryPayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addServiceToCategory(body: CategoryPayload, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = JobFunctionEndpointsApiFetchParamCreator(configuration).addServiceToCategory(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Add service to company
         * @param {CompanyServicePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addServiceToCompany(body: CompanyServicePayload, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = JobFunctionEndpointsApiFetchParamCreator(configuration).addServiceToCompany(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Add service to user
         * @param {UserServicePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addServiceToUser(body: UserServicePayload, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = JobFunctionEndpointsApiFetchParamCreator(configuration).addServiceToUser(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Associate content admin to application
         * @param {ContentAdminAppPayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        associateContentAdminToApplication(body: ContentAdminAppPayload, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ContentAdminApp> {
            const localVarFetchArgs = JobFunctionEndpointsApiFetchParamCreator(configuration).associateContentAdminToApplication(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Create service
         * @param {ServicePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createService(body: ServicePayload, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CreateResponse> {
            const localVarFetchArgs = JobFunctionEndpointsApiFetchParamCreator(configuration).createService(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete content admin from application
         * @param {ContentAdminAppPayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContentAdminFromApplication(body: ContentAdminAppPayload, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = JobFunctionEndpointsApiFetchParamCreator(configuration).deleteContentAdminFromApplication(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete service
         * @param {ServicePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteService(body: ServicePayload, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = JobFunctionEndpointsApiFetchParamCreator(configuration).deleteService(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get all applications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllApplications(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Application>> {
            const localVarFetchArgs = JobFunctionEndpointsApiFetchParamCreator(configuration).getAllApplications(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get all group access applications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllGroupAccessApplications(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>> {
            const localVarFetchArgs = JobFunctionEndpointsApiFetchParamCreator(configuration).getAllGroupAccessApplications(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get all services
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllServices(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ServiceApp>> {
            const localVarFetchArgs = JobFunctionEndpointsApiFetchParamCreator(configuration).getAllServices(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get applications from company
         * @param {string} embCompanyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationsFromCompany(embCompanyCode: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Application>> {
            const localVarFetchArgs = JobFunctionEndpointsApiFetchParamCreator(configuration).getApplicationsFromCompany(embCompanyCode, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get applications from user
         * @param {string} userDn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationsFromUser(userDn: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Application>> {
            const localVarFetchArgs = JobFunctionEndpointsApiFetchParamCreator(configuration).getApplicationsFromUser(userDn, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get content admin applications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentAdminApplications(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ContentAdminAppDTO>> {
            const localVarFetchArgs = JobFunctionEndpointsApiFetchParamCreator(configuration).getContentAdminApplications(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get links applications from user
         * @param {Jwt} jwt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLinksApplicationsFromUser(jwt: Jwt, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<LinksApplication>> {
            const localVarFetchArgs = JobFunctionEndpointsApiFetchParamCreator(configuration).getLinksApplicationsFromUser(jwt, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get services from application
         * @param {string} applicationDn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServicesFromApplication(applicationDn: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ServiceApp>> {
            const localVarFetchArgs = JobFunctionEndpointsApiFetchParamCreator(configuration).getServicesFromApplication(applicationDn, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get services from company
         * @param {string} embCompanyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServicesFromCompany(embCompanyCode: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ServiceApp>> {
            const localVarFetchArgs = JobFunctionEndpointsApiFetchParamCreator(configuration).getServicesFromCompany(embCompanyCode, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get services from user
         * @param {string} userDn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServicesFromUser(userDn: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ServiceApp>> {
            const localVarFetchArgs = JobFunctionEndpointsApiFetchParamCreator(configuration).getServicesFromUser(userDn, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Remove application from company
         * @param {CompanyApplicationPayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeApplicationFromCompany(body: CompanyApplicationPayload, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = JobFunctionEndpointsApiFetchParamCreator(configuration).removeApplicationFromCompany(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Remove service from category
         * @param {CategoryPayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeServiceFromCategory(body: CategoryPayload, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = JobFunctionEndpointsApiFetchParamCreator(configuration).removeServiceFromCategory(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Remove service from company
         * @param {CompanyServicePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeServiceFromCompany(body: CompanyServicePayload, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = JobFunctionEndpointsApiFetchParamCreator(configuration).removeServiceFromCompany(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Remove service from user
         * @param {UserServicePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeServiceFromUser(body: UserServicePayload, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = JobFunctionEndpointsApiFetchParamCreator(configuration).removeServiceFromUser(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update service
         * @param {ServicePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateService(body: ServicePayload, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = JobFunctionEndpointsApiFetchParamCreator(configuration).updateService(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * JobFunctionEndpointsApi - factory interface
 * @export
 */
export const JobFunctionEndpointsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Add and remove service to user
         * @param {UserServiceAddRemovePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAndRemoveServiceToUser(body: UserServiceAddRemovePayload, options?: any) {
            return JobFunctionEndpointsApiFp(configuration).addAndRemoveServiceToUser(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Add application to company
         * @param {CompanyApplicationPayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addApplicationToCompany(body: CompanyApplicationPayload, options?: any) {
            return JobFunctionEndpointsApiFp(configuration).addApplicationToCompany(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Add service to category
         * @param {CategoryPayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addServiceToCategory(body: CategoryPayload, options?: any) {
            return JobFunctionEndpointsApiFp(configuration).addServiceToCategory(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Add service to company
         * @param {CompanyServicePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addServiceToCompany(body: CompanyServicePayload, options?: any) {
            return JobFunctionEndpointsApiFp(configuration).addServiceToCompany(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Add service to user
         * @param {UserServicePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addServiceToUser(body: UserServicePayload, options?: any) {
            return JobFunctionEndpointsApiFp(configuration).addServiceToUser(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Associate content admin to application
         * @param {ContentAdminAppPayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        associateContentAdminToApplication(body: ContentAdminAppPayload, options?: any) {
            return JobFunctionEndpointsApiFp(configuration).associateContentAdminToApplication(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Create service
         * @param {ServicePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createService(body: ServicePayload, options?: any) {
            return JobFunctionEndpointsApiFp(configuration).createService(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete content admin from application
         * @param {ContentAdminAppPayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContentAdminFromApplication(body: ContentAdminAppPayload, options?: any) {
            return JobFunctionEndpointsApiFp(configuration).deleteContentAdminFromApplication(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete service
         * @param {ServicePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteService(body: ServicePayload, options?: any) {
            return JobFunctionEndpointsApiFp(configuration).deleteService(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get all applications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllApplications(options?: any) {
            return JobFunctionEndpointsApiFp(configuration).getAllApplications(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get all group access applications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllGroupAccessApplications(options?: any) {
            return JobFunctionEndpointsApiFp(configuration).getAllGroupAccessApplications(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get all services
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllServices(options?: any) {
            return JobFunctionEndpointsApiFp(configuration).getAllServices(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get applications from company
         * @param {string} embCompanyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationsFromCompany(embCompanyCode: string, options?: any) {
            return JobFunctionEndpointsApiFp(configuration).getApplicationsFromCompany(embCompanyCode, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get applications from user
         * @param {string} userDn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationsFromUser(userDn: string, options?: any) {
            return JobFunctionEndpointsApiFp(configuration).getApplicationsFromUser(userDn, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get content admin applications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentAdminApplications(options?: any) {
            return JobFunctionEndpointsApiFp(configuration).getContentAdminApplications(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get links applications from user
         * @param {Jwt} jwt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLinksApplicationsFromUser(jwt: Jwt, options?: any) {
            return JobFunctionEndpointsApiFp(configuration).getLinksApplicationsFromUser(jwt, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get services from application
         * @param {string} applicationDn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServicesFromApplication(applicationDn: string, options?: any) {
            return JobFunctionEndpointsApiFp(configuration).getServicesFromApplication(applicationDn, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get services from company
         * @param {string} embCompanyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServicesFromCompany(embCompanyCode: string, options?: any) {
            return JobFunctionEndpointsApiFp(configuration).getServicesFromCompany(embCompanyCode, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get services from user
         * @param {string} userDn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServicesFromUser(userDn: string, options?: any) {
            return JobFunctionEndpointsApiFp(configuration).getServicesFromUser(userDn, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Remove application from company
         * @param {CompanyApplicationPayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeApplicationFromCompany(body: CompanyApplicationPayload, options?: any) {
            return JobFunctionEndpointsApiFp(configuration).removeApplicationFromCompany(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Remove service from category
         * @param {CategoryPayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeServiceFromCategory(body: CategoryPayload, options?: any) {
            return JobFunctionEndpointsApiFp(configuration).removeServiceFromCategory(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Remove service from company
         * @param {CompanyServicePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeServiceFromCompany(body: CompanyServicePayload, options?: any) {
            return JobFunctionEndpointsApiFp(configuration).removeServiceFromCompany(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Remove service from user
         * @param {UserServicePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeServiceFromUser(body: UserServicePayload, options?: any) {
            return JobFunctionEndpointsApiFp(configuration).removeServiceFromUser(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update service
         * @param {ServicePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateService(body: ServicePayload, options?: any) {
            return JobFunctionEndpointsApiFp(configuration).updateService(body, options)(fetch, basePath);
        },
    };
};

/**
 * JobFunctionEndpointsApi - object-oriented interface
 * @export
 * @class JobFunctionEndpointsApi
 * @extends {BaseAPI}
 */
export class JobFunctionEndpointsApi extends BaseAPI {
    /**
     * 
     * @summary Add and remove service to user
     * @param {UserServiceAddRemovePayload} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobFunctionEndpointsApi
     */
    public addAndRemoveServiceToUser(body: UserServiceAddRemovePayload, options?: any) {
        return JobFunctionEndpointsApiFp(this.configuration).addAndRemoveServiceToUser(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Add application to company
     * @param {CompanyApplicationPayload} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobFunctionEndpointsApi
     */
    public addApplicationToCompany(body: CompanyApplicationPayload, options?: any) {
        return JobFunctionEndpointsApiFp(this.configuration).addApplicationToCompany(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Add service to category
     * @param {CategoryPayload} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobFunctionEndpointsApi
     */
    public addServiceToCategory(body: CategoryPayload, options?: any) {
        return JobFunctionEndpointsApiFp(this.configuration).addServiceToCategory(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Add service to company
     * @param {CompanyServicePayload} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobFunctionEndpointsApi
     */
    public addServiceToCompany(body: CompanyServicePayload, options?: any) {
        return JobFunctionEndpointsApiFp(this.configuration).addServiceToCompany(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Add service to user
     * @param {UserServicePayload} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobFunctionEndpointsApi
     */
    public addServiceToUser(body: UserServicePayload, options?: any) {
        return JobFunctionEndpointsApiFp(this.configuration).addServiceToUser(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Associate content admin to application
     * @param {ContentAdminAppPayload} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobFunctionEndpointsApi
     */
    public associateContentAdminToApplication(body: ContentAdminAppPayload, options?: any) {
        return JobFunctionEndpointsApiFp(this.configuration).associateContentAdminToApplication(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Create service
     * @param {ServicePayload} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobFunctionEndpointsApi
     */
    public createService(body: ServicePayload, options?: any) {
        return JobFunctionEndpointsApiFp(this.configuration).createService(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete content admin from application
     * @param {ContentAdminAppPayload} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobFunctionEndpointsApi
     */
    public deleteContentAdminFromApplication(body: ContentAdminAppPayload, options?: any) {
        return JobFunctionEndpointsApiFp(this.configuration).deleteContentAdminFromApplication(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete service
     * @param {ServicePayload} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobFunctionEndpointsApi
     */
    public deleteService(body: ServicePayload, options?: any) {
        return JobFunctionEndpointsApiFp(this.configuration).deleteService(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get all applications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobFunctionEndpointsApi
     */
    public getAllApplications(options?: any) {
        return JobFunctionEndpointsApiFp(this.configuration).getAllApplications(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get all group access applications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobFunctionEndpointsApi
     */
    public getAllGroupAccessApplications(options?: any) {
        return JobFunctionEndpointsApiFp(this.configuration).getAllGroupAccessApplications(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get all services
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobFunctionEndpointsApi
     */
    public getAllServices(options?: any) {
        return JobFunctionEndpointsApiFp(this.configuration).getAllServices(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get applications from company
     * @param {string} embCompanyCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobFunctionEndpointsApi
     */
    public getApplicationsFromCompany(embCompanyCode: string, options?: any) {
        return JobFunctionEndpointsApiFp(this.configuration).getApplicationsFromCompany(embCompanyCode, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get applications from user
     * @param {string} userDn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobFunctionEndpointsApi
     */
    public getApplicationsFromUser(userDn: string, options?: any) {
        return JobFunctionEndpointsApiFp(this.configuration).getApplicationsFromUser(userDn, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get content admin applications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobFunctionEndpointsApi
     */
    public getContentAdminApplications(options?: any) {
        return JobFunctionEndpointsApiFp(this.configuration).getContentAdminApplications(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get links applications from user
     * @param {Jwt} jwt 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobFunctionEndpointsApi
     */
    public getLinksApplicationsFromUser(jwt: Jwt, options?: any) {
        return JobFunctionEndpointsApiFp(this.configuration).getLinksApplicationsFromUser(jwt, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get services from application
     * @param {string} applicationDn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobFunctionEndpointsApi
     */
    public getServicesFromApplication(applicationDn: string, options?: any) {
        return JobFunctionEndpointsApiFp(this.configuration).getServicesFromApplication(applicationDn, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get services from company
     * @param {string} embCompanyCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobFunctionEndpointsApi
     */
    public getServicesFromCompany(embCompanyCode: string, options?: any) {
        return JobFunctionEndpointsApiFp(this.configuration).getServicesFromCompany(embCompanyCode, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get services from user
     * @param {string} userDn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobFunctionEndpointsApi
     */
    public getServicesFromUser(userDn: string, options?: any) {
        return JobFunctionEndpointsApiFp(this.configuration).getServicesFromUser(userDn, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Remove application from company
     * @param {CompanyApplicationPayload} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobFunctionEndpointsApi
     */
    public removeApplicationFromCompany(body: CompanyApplicationPayload, options?: any) {
        return JobFunctionEndpointsApiFp(this.configuration).removeApplicationFromCompany(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Remove service from category
     * @param {CategoryPayload} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobFunctionEndpointsApi
     */
    public removeServiceFromCategory(body: CategoryPayload, options?: any) {
        return JobFunctionEndpointsApiFp(this.configuration).removeServiceFromCategory(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Remove service from company
     * @param {CompanyServicePayload} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobFunctionEndpointsApi
     */
    public removeServiceFromCompany(body: CompanyServicePayload, options?: any) {
        return JobFunctionEndpointsApiFp(this.configuration).removeServiceFromCompany(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Remove service from user
     * @param {UserServicePayload} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobFunctionEndpointsApi
     */
    public removeServiceFromUser(body: UserServicePayload, options?: any) {
        return JobFunctionEndpointsApiFp(this.configuration).removeServiceFromUser(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update service
     * @param {ServicePayload} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobFunctionEndpointsApi
     */
    public updateService(body: ServicePayload, options?: any) {
        return JobFunctionEndpointsApiFp(this.configuration).updateService(body, options)(this.fetch, this.basePath);
    }

}
/**
 * MenuEndpointsApi - fetch parameter creator
 * @export
 */
export const MenuEndpointsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all menus
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenus(username: string, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling getMenus.');
            }
            const localVarPath = `/menu`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MenuEndpointsApi - functional programming interface
 * @export
 */
export const MenuEndpointsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all menus
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenus(username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<MenuDTO>> {
            const localVarFetchArgs = MenuEndpointsApiFetchParamCreator(configuration).getMenus(username, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * MenuEndpointsApi - factory interface
 * @export
 */
export const MenuEndpointsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Get all menus
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenus(username: string, options?: any) {
            return MenuEndpointsApiFp(configuration).getMenus(username, options)(fetch, basePath);
        },
    };
};

/**
 * MenuEndpointsApi - object-oriented interface
 * @export
 * @class MenuEndpointsApi
 * @extends {BaseAPI}
 */
export class MenuEndpointsApi extends BaseAPI {
    /**
     * 
     * @summary Get all menus
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuEndpointsApi
     */
    public getMenus(username: string, options?: any) {
        return MenuEndpointsApiFp(this.configuration).getMenus(username, options)(this.fetch, this.basePath);
    }

}
/**
 * MessageCenterEndpointsApi - fetch parameter creator
 * @export
 */
export const MessageCenterEndpointsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete message
         * @param {number} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMessage(messageId: number, options: any = {}): FetchArgs {
            // verify required parameter 'messageId' is not null or undefined
            if (messageId === null || messageId === undefined) {
                throw new RequiredError('messageId','Required parameter messageId was null or undefined when calling deleteMessage.');
            }
            const localVarPath = `/message/{messageId}`
                .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete message template
         * @param {number} messageTemplateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMessageTemplate(messageTemplateId: number, options: any = {}): FetchArgs {
            // verify required parameter 'messageTemplateId' is not null or undefined
            if (messageTemplateId === null || messageTemplateId === undefined) {
                throw new RequiredError('messageTemplateId','Required parameter messageTemplateId was null or undefined when calling deleteMessageTemplate.');
            }
            const localVarPath = `/message/template/{messageTemplateId}`
                .replace(`{${"messageTemplateId"}}`, encodeURIComponent(String(messageTemplateId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get message template
         * @param {number} messageTemplateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageTemplate(messageTemplateId: number, options: any = {}): FetchArgs {
            // verify required parameter 'messageTemplateId' is not null or undefined
            if (messageTemplateId === null || messageTemplateId === undefined) {
                throw new RequiredError('messageTemplateId','Required parameter messageTemplateId was null or undefined when calling getMessageTemplate.');
            }
            const localVarPath = `/message/template/{messageTemplateId}`
                .replace(`{${"messageTemplateId"}}`, encodeURIComponent(String(messageTemplateId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get message
         * @param {number} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserMessage(messageId: number, options: any = {}): FetchArgs {
            // verify required parameter 'messageId' is not null or undefined
            if (messageId === null || messageId === undefined) {
                throw new RequiredError('messageId','Required parameter messageId was null or undefined when calling getUserMessage.');
            }
            const localVarPath = `/message/{messageId}`
                .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all messages by parameters
         * @param {Pageable} pageable 
         * @param {string} [title] 
         * @param {Date} [startDate] 
         * @param {Date} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllMessagesByParameters(pageable: Pageable, title?: string, startDate?: Date, endDate?: Date, options: any = {}): FetchArgs {
            // verify required parameter 'pageable' is not null or undefined
            if (pageable === null || pageable === undefined) {
                throw new RequiredError('pageable','Required parameter pageable was null or undefined when calling listAllMessagesByParameters.');
            }
            const localVarPath = `/message`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any).toISOString();
            }

            if (pageable !== undefined) {
                localVarQueryParameter['pageable'] = pageable;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all messages by user
         * @param {string} userCn 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllMessagesByUser(userCn: string, pageable: Pageable, options: any = {}): FetchArgs {
            // verify required parameter 'userCn' is not null or undefined
            if (userCn === null || userCn === undefined) {
                throw new RequiredError('userCn','Required parameter userCn was null or undefined when calling listAllMessagesByUser.');
            }
            // verify required parameter 'pageable' is not null or undefined
            if (pageable === null || pageable === undefined) {
                throw new RequiredError('pageable','Required parameter pageable was null or undefined when calling listAllMessagesByUser.');
            }
            const localVarPath = `/message/user/{userCn}`
                .replace(`{${"userCn"}}`, encodeURIComponent(String(userCn)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageable !== undefined) {
                localVarQueryParameter['pageable'] = pageable;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all message templates by parameters
         * @param {Pageable} pageable 
         * @param {string} [name] 
         * @param {Date} [startDate] 
         * @param {Date} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMessageTemplates(pageable: Pageable, name?: string, startDate?: Date, endDate?: Date, options: any = {}): FetchArgs {
            // verify required parameter 'pageable' is not null or undefined
            if (pageable === null || pageable === undefined) {
                throw new RequiredError('pageable','Required parameter pageable was null or undefined when calling listMessageTemplates.');
            }
            const localVarPath = `/message/template`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any).toISOString();
            }

            if (pageable !== undefined) {
                localVarQueryParameter['pageable'] = pageable;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read user message
         * @param {number} messageUserId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUserMessage(messageUserId: number, options: any = {}): FetchArgs {
            // verify required parameter 'messageUserId' is not null or undefined
            if (messageUserId === null || messageUserId === undefined) {
                throw new RequiredError('messageUserId','Required parameter messageUserId was null or undefined when calling readUserMessage.');
            }
            const localVarPath = `/message/{messageUserId}`
                .replace(`{${"messageUserId"}}`, encodeURIComponent(String(messageUserId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save new message
         * @param {MessageCenterPayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveMessage(body: MessageCenterPayload, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling saveMessage.');
            }
            const localVarPath = `/message`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"MessageCenterPayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save new message template
         * @param {MessageTemplateDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveMessageTemplate(body: MessageTemplateDTO, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling saveMessageTemplate.');
            }
            const localVarPath = `/message/template`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"MessageTemplateDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update message
         * @param {MessageCenterPayload} body 
         * @param {number} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessage(body: MessageCenterPayload, messageId: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateMessage.');
            }
            // verify required parameter 'messageId' is not null or undefined
            if (messageId === null || messageId === undefined) {
                throw new RequiredError('messageId','Required parameter messageId was null or undefined when calling updateMessage.');
            }
            const localVarPath = `/message/{messageId}`
                .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"MessageCenterPayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update message template
         * @param {MessageTemplateDTO} body 
         * @param {number} messageTemplateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessageTemplate(body: MessageTemplateDTO, messageTemplateId: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateMessageTemplate.');
            }
            // verify required parameter 'messageTemplateId' is not null or undefined
            if (messageTemplateId === null || messageTemplateId === undefined) {
                throw new RequiredError('messageTemplateId','Required parameter messageTemplateId was null or undefined when calling updateMessageTemplate.');
            }
            const localVarPath = `/message/template/{messageTemplateId}`
                .replace(`{${"messageTemplateId"}}`, encodeURIComponent(String(messageTemplateId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"MessageTemplateDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessageCenterEndpointsApi - functional programming interface
 * @export
 */
export const MessageCenterEndpointsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete message
         * @param {number} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMessage(messageId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = MessageCenterEndpointsApiFetchParamCreator(configuration).deleteMessage(messageId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete message template
         * @param {number} messageTemplateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMessageTemplate(messageTemplateId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = MessageCenterEndpointsApiFetchParamCreator(configuration).deleteMessageTemplate(messageTemplateId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get message template
         * @param {number} messageTemplateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageTemplate(messageTemplateId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MessageTemplate> {
            const localVarFetchArgs = MessageCenterEndpointsApiFetchParamCreator(configuration).getMessageTemplate(messageTemplateId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get message
         * @param {number} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserMessage(messageId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MessageGroupedDTO> {
            const localVarFetchArgs = MessageCenterEndpointsApiFetchParamCreator(configuration).getUserMessage(messageId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List all messages by parameters
         * @param {Pageable} pageable 
         * @param {string} [title] 
         * @param {Date} [startDate] 
         * @param {Date} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllMessagesByParameters(pageable: Pageable, title?: string, startDate?: Date, endDate?: Date, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PageMessageGroupedDTO> {
            const localVarFetchArgs = MessageCenterEndpointsApiFetchParamCreator(configuration).listAllMessagesByParameters(pageable, title, startDate, endDate, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List all messages by user
         * @param {string} userCn 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllMessagesByUser(userCn: string, pageable: Pageable, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PageMessageUser> {
            const localVarFetchArgs = MessageCenterEndpointsApiFetchParamCreator(configuration).listAllMessagesByUser(userCn, pageable, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List all message templates by parameters
         * @param {Pageable} pageable 
         * @param {string} [name] 
         * @param {Date} [startDate] 
         * @param {Date} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMessageTemplates(pageable: Pageable, name?: string, startDate?: Date, endDate?: Date, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PageMessageTemplate> {
            const localVarFetchArgs = MessageCenterEndpointsApiFetchParamCreator(configuration).listMessageTemplates(pageable, name, startDate, endDate, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Read user message
         * @param {number} messageUserId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUserMessage(messageUserId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MessageUser> {
            const localVarFetchArgs = MessageCenterEndpointsApiFetchParamCreator(configuration).readUserMessage(messageUserId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Save new message
         * @param {MessageCenterPayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveMessage(body: MessageCenterPayload, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = MessageCenterEndpointsApiFetchParamCreator(configuration).saveMessage(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Save new message template
         * @param {MessageTemplateDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveMessageTemplate(body: MessageTemplateDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MessageTemplate> {
            const localVarFetchArgs = MessageCenterEndpointsApiFetchParamCreator(configuration).saveMessageTemplate(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update message
         * @param {MessageCenterPayload} body 
         * @param {number} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessage(body: MessageCenterPayload, messageId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Message> {
            const localVarFetchArgs = MessageCenterEndpointsApiFetchParamCreator(configuration).updateMessage(body, messageId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update message template
         * @param {MessageTemplateDTO} body 
         * @param {number} messageTemplateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessageTemplate(body: MessageTemplateDTO, messageTemplateId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MessageTemplate> {
            const localVarFetchArgs = MessageCenterEndpointsApiFetchParamCreator(configuration).updateMessageTemplate(body, messageTemplateId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * MessageCenterEndpointsApi - factory interface
 * @export
 */
export const MessageCenterEndpointsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Delete message
         * @param {number} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMessage(messageId: number, options?: any) {
            return MessageCenterEndpointsApiFp(configuration).deleteMessage(messageId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete message template
         * @param {number} messageTemplateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMessageTemplate(messageTemplateId: number, options?: any) {
            return MessageCenterEndpointsApiFp(configuration).deleteMessageTemplate(messageTemplateId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get message template
         * @param {number} messageTemplateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageTemplate(messageTemplateId: number, options?: any) {
            return MessageCenterEndpointsApiFp(configuration).getMessageTemplate(messageTemplateId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get message
         * @param {number} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserMessage(messageId: number, options?: any) {
            return MessageCenterEndpointsApiFp(configuration).getUserMessage(messageId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List all messages by parameters
         * @param {Pageable} pageable 
         * @param {string} [title] 
         * @param {Date} [startDate] 
         * @param {Date} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllMessagesByParameters(pageable: Pageable, title?: string, startDate?: Date, endDate?: Date, options?: any) {
            return MessageCenterEndpointsApiFp(configuration).listAllMessagesByParameters(pageable, title, startDate, endDate, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List all messages by user
         * @param {string} userCn 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllMessagesByUser(userCn: string, pageable: Pageable, options?: any) {
            return MessageCenterEndpointsApiFp(configuration).listAllMessagesByUser(userCn, pageable, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List all message templates by parameters
         * @param {Pageable} pageable 
         * @param {string} [name] 
         * @param {Date} [startDate] 
         * @param {Date} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMessageTemplates(pageable: Pageable, name?: string, startDate?: Date, endDate?: Date, options?: any) {
            return MessageCenterEndpointsApiFp(configuration).listMessageTemplates(pageable, name, startDate, endDate, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Read user message
         * @param {number} messageUserId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUserMessage(messageUserId: number, options?: any) {
            return MessageCenterEndpointsApiFp(configuration).readUserMessage(messageUserId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Save new message
         * @param {MessageCenterPayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveMessage(body: MessageCenterPayload, options?: any) {
            return MessageCenterEndpointsApiFp(configuration).saveMessage(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Save new message template
         * @param {MessageTemplateDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveMessageTemplate(body: MessageTemplateDTO, options?: any) {
            return MessageCenterEndpointsApiFp(configuration).saveMessageTemplate(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update message
         * @param {MessageCenterPayload} body 
         * @param {number} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessage(body: MessageCenterPayload, messageId: number, options?: any) {
            return MessageCenterEndpointsApiFp(configuration).updateMessage(body, messageId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update message template
         * @param {MessageTemplateDTO} body 
         * @param {number} messageTemplateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessageTemplate(body: MessageTemplateDTO, messageTemplateId: number, options?: any) {
            return MessageCenterEndpointsApiFp(configuration).updateMessageTemplate(body, messageTemplateId, options)(fetch, basePath);
        },
    };
};

/**
 * MessageCenterEndpointsApi - object-oriented interface
 * @export
 * @class MessageCenterEndpointsApi
 * @extends {BaseAPI}
 */
export class MessageCenterEndpointsApi extends BaseAPI {
    /**
     * 
     * @summary Delete message
     * @param {number} messageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageCenterEndpointsApi
     */
    public deleteMessage(messageId: number, options?: any) {
        return MessageCenterEndpointsApiFp(this.configuration).deleteMessage(messageId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete message template
     * @param {number} messageTemplateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageCenterEndpointsApi
     */
    public deleteMessageTemplate(messageTemplateId: number, options?: any) {
        return MessageCenterEndpointsApiFp(this.configuration).deleteMessageTemplate(messageTemplateId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get message template
     * @param {number} messageTemplateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageCenterEndpointsApi
     */
    public getMessageTemplate(messageTemplateId: number, options?: any) {
        return MessageCenterEndpointsApiFp(this.configuration).getMessageTemplate(messageTemplateId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get message
     * @param {number} messageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageCenterEndpointsApi
     */
    public getUserMessage(messageId: number, options?: any) {
        return MessageCenterEndpointsApiFp(this.configuration).getUserMessage(messageId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List all messages by parameters
     * @param {Pageable} pageable 
     * @param {string} [title] 
     * @param {Date} [startDate] 
     * @param {Date} [endDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageCenterEndpointsApi
     */
    public listAllMessagesByParameters(pageable: Pageable, title?: string, startDate?: Date, endDate?: Date, options?: any) {
        return MessageCenterEndpointsApiFp(this.configuration).listAllMessagesByParameters(pageable, title, startDate, endDate, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List all messages by user
     * @param {string} userCn 
     * @param {Pageable} pageable 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageCenterEndpointsApi
     */
    public listAllMessagesByUser(userCn: string, pageable: Pageable, options?: any) {
        return MessageCenterEndpointsApiFp(this.configuration).listAllMessagesByUser(userCn, pageable, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List all message templates by parameters
     * @param {Pageable} pageable 
     * @param {string} [name] 
     * @param {Date} [startDate] 
     * @param {Date} [endDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageCenterEndpointsApi
     */
    public listMessageTemplates(pageable: Pageable, name?: string, startDate?: Date, endDate?: Date, options?: any) {
        return MessageCenterEndpointsApiFp(this.configuration).listMessageTemplates(pageable, name, startDate, endDate, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Read user message
     * @param {number} messageUserId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageCenterEndpointsApi
     */
    public readUserMessage(messageUserId: number, options?: any) {
        return MessageCenterEndpointsApiFp(this.configuration).readUserMessage(messageUserId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Save new message
     * @param {MessageCenterPayload} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageCenterEndpointsApi
     */
    public saveMessage(body: MessageCenterPayload, options?: any) {
        return MessageCenterEndpointsApiFp(this.configuration).saveMessage(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Save new message template
     * @param {MessageTemplateDTO} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageCenterEndpointsApi
     */
    public saveMessageTemplate(body: MessageTemplateDTO, options?: any) {
        return MessageCenterEndpointsApiFp(this.configuration).saveMessageTemplate(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update message
     * @param {MessageCenterPayload} body 
     * @param {number} messageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageCenterEndpointsApi
     */
    public updateMessage(body: MessageCenterPayload, messageId: number, options?: any) {
        return MessageCenterEndpointsApiFp(this.configuration).updateMessage(body, messageId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update message template
     * @param {MessageTemplateDTO} body 
     * @param {number} messageTemplateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageCenterEndpointsApi
     */
    public updateMessageTemplate(body: MessageTemplateDTO, messageTemplateId: number, options?: any) {
        return MessageCenterEndpointsApiFp(this.configuration).updateMessageTemplate(body, messageTemplateId, options)(this.fetch, this.basePath);
    }

}
/**
 * PageEndpointsApi - fetch parameter creator
 * @export
 */
export const PageEndpointsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create new page
         * @param {PageDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPage(body: PageDTO, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createPage.');
            }
            const localVarPath = `/page`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PageDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a page by pageId.
         * @param {number} pageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePage(pageId: number, options: any = {}): FetchArgs {
            // verify required parameter 'pageId' is not null or undefined
            if (pageId === null || pageId === undefined) {
                throw new RequiredError('pageId','Required parameter pageId was null or undefined when calling deletePage.');
            }
            const localVarPath = `/page/{pageId}`
                .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all pages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPages(options: any = {}): FetchArgs {
            const localVarPath = `/page`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get page by id
         * @param {number} pageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPage(pageId: number, options: any = {}): FetchArgs {
            // verify required parameter 'pageId' is not null or undefined
            if (pageId === null || pageId === undefined) {
                throw new RequiredError('pageId','Required parameter pageId was null or undefined when calling getPage.');
            }
            const localVarPath = `/page/{pageId}`
                .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a page.
         * @param {PageDTO} body 
         * @param {number} pageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePage(body: PageDTO, pageId: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updatePage.');
            }
            // verify required parameter 'pageId' is not null or undefined
            if (pageId === null || pageId === undefined) {
                throw new RequiredError('pageId','Required parameter pageId was null or undefined when calling updatePage.');
            }
            const localVarPath = `/page/{pageId}`
                .replace(`{${"pageId"}}`, encodeURIComponent(String(pageId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PageDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PageEndpointsApi - functional programming interface
 * @export
 */
export const PageEndpointsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create new page
         * @param {PageDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPage(body: PageDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = PageEndpointsApiFetchParamCreator(configuration).createPage(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a page by pageId.
         * @param {number} pageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePage(pageId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = PageEndpointsApiFetchParamCreator(configuration).deletePage(pageId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get all pages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPages(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<PageModel>> {
            const localVarFetchArgs = PageEndpointsApiFetchParamCreator(configuration).getAllPages(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get page by id
         * @param {number} pageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPage(pageId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = PageEndpointsApiFetchParamCreator(configuration).getPage(pageId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update a page.
         * @param {PageDTO} body 
         * @param {number} pageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePage(body: PageDTO, pageId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = PageEndpointsApiFetchParamCreator(configuration).updatePage(body, pageId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PageEndpointsApi - factory interface
 * @export
 */
export const PageEndpointsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create new page
         * @param {PageDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPage(body: PageDTO, options?: any) {
            return PageEndpointsApiFp(configuration).createPage(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a page by pageId.
         * @param {number} pageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePage(pageId: number, options?: any) {
            return PageEndpointsApiFp(configuration).deletePage(pageId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get all pages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPages(options?: any) {
            return PageEndpointsApiFp(configuration).getAllPages(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get page by id
         * @param {number} pageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPage(pageId: number, options?: any) {
            return PageEndpointsApiFp(configuration).getPage(pageId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update a page.
         * @param {PageDTO} body 
         * @param {number} pageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePage(body: PageDTO, pageId: number, options?: any) {
            return PageEndpointsApiFp(configuration).updatePage(body, pageId, options)(fetch, basePath);
        },
    };
};

/**
 * PageEndpointsApi - object-oriented interface
 * @export
 * @class PageEndpointsApi
 * @extends {BaseAPI}
 */
export class PageEndpointsApi extends BaseAPI {
    /**
     * 
     * @summary Create new page
     * @param {PageDTO} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageEndpointsApi
     */
    public createPage(body: PageDTO, options?: any) {
        return PageEndpointsApiFp(this.configuration).createPage(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a page by pageId.
     * @param {number} pageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageEndpointsApi
     */
    public deletePage(pageId: number, options?: any) {
        return PageEndpointsApiFp(this.configuration).deletePage(pageId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get all pages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageEndpointsApi
     */
    public getAllPages(options?: any) {
        return PageEndpointsApiFp(this.configuration).getAllPages(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get page by id
     * @param {number} pageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageEndpointsApi
     */
    public getPage(pageId: number, options?: any) {
        return PageEndpointsApiFp(this.configuration).getPage(pageId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update a page.
     * @param {PageDTO} body 
     * @param {number} pageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageEndpointsApi
     */
    public updatePage(body: PageDTO, pageId: number, options?: any) {
        return PageEndpointsApiFp(this.configuration).updatePage(body, pageId, options)(this.fetch, this.basePath);
    }

}
/**
 * PasswordEndpointsApi - fetch parameter creator
 * @export
 */
export const PasswordEndpointsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Expire token
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expireToken(token: string, options: any = {}): FetchArgs {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling expireToken.');
            }
            const localVarPath = `/password/token`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Forgot password
         * @param {PasswordPayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword(body: PasswordPayload, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling forgotPassword.');
            }
            const localVarPath = `/password/forgot`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PasswordPayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get users to set password
         * @param {PasswordPayload} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersToSetPassword(payload: PasswordPayload, options: any = {}): FetchArgs {
            // verify required parameter 'payload' is not null or undefined
            if (payload === null || payload === undefined) {
                throw new RequiredError('payload','Required parameter payload was null or undefined when calling getUsersToSetPassword.');
            }
            const localVarPath = `/password`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (payload !== undefined) {
                localVarQueryParameter['payload'] = payload;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set user password
         * @param {PasswordPayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setUserPassword(body: PasswordPayload, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling setUserPassword.');
            }
            const localVarPath = `/password`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PasswordPayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Verify token
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyToken(token: string, options: any = {}): FetchArgs {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling verifyToken.');
            }
            const localVarPath = `/password/token`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PasswordEndpointsApi - functional programming interface
 * @export
 */
export const PasswordEndpointsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Expire token
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expireToken(token: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {
            const localVarFetchArgs = PasswordEndpointsApiFetchParamCreator(configuration).expireToken(token, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Forgot password
         * @param {PasswordPayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword(body: PasswordPayload, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = PasswordEndpointsApiFetchParamCreator(configuration).forgotPassword(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get users to set password
         * @param {PasswordPayload} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersToSetPassword(payload: PasswordPayload, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Password>> {
            const localVarFetchArgs = PasswordEndpointsApiFetchParamCreator(configuration).getUsersToSetPassword(payload, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Set user password
         * @param {PasswordPayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setUserPassword(body: PasswordPayload, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CreateResponse> {
            const localVarFetchArgs = PasswordEndpointsApiFetchParamCreator(configuration).setUserPassword(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Verify token
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyToken(token: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UrlExpireToken> {
            const localVarFetchArgs = PasswordEndpointsApiFetchParamCreator(configuration).verifyToken(token, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PasswordEndpointsApi - factory interface
 * @export
 */
export const PasswordEndpointsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Expire token
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expireToken(token: string, options?: any) {
            return PasswordEndpointsApiFp(configuration).expireToken(token, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Forgot password
         * @param {PasswordPayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword(body: PasswordPayload, options?: any) {
            return PasswordEndpointsApiFp(configuration).forgotPassword(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get users to set password
         * @param {PasswordPayload} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersToSetPassword(payload: PasswordPayload, options?: any) {
            return PasswordEndpointsApiFp(configuration).getUsersToSetPassword(payload, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Set user password
         * @param {PasswordPayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setUserPassword(body: PasswordPayload, options?: any) {
            return PasswordEndpointsApiFp(configuration).setUserPassword(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Verify token
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyToken(token: string, options?: any) {
            return PasswordEndpointsApiFp(configuration).verifyToken(token, options)(fetch, basePath);
        },
    };
};

/**
 * PasswordEndpointsApi - object-oriented interface
 * @export
 * @class PasswordEndpointsApi
 * @extends {BaseAPI}
 */
export class PasswordEndpointsApi extends BaseAPI {
    /**
     * 
     * @summary Expire token
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordEndpointsApi
     */
    public expireToken(token: string, options?: any) {
        return PasswordEndpointsApiFp(this.configuration).expireToken(token, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Forgot password
     * @param {PasswordPayload} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordEndpointsApi
     */
    public forgotPassword(body: PasswordPayload, options?: any) {
        return PasswordEndpointsApiFp(this.configuration).forgotPassword(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get users to set password
     * @param {PasswordPayload} payload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordEndpointsApi
     */
    public getUsersToSetPassword(payload: PasswordPayload, options?: any) {
        return PasswordEndpointsApiFp(this.configuration).getUsersToSetPassword(payload, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Set user password
     * @param {PasswordPayload} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordEndpointsApi
     */
    public setUserPassword(body: PasswordPayload, options?: any) {
        return PasswordEndpointsApiFp(this.configuration).setUserPassword(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Verify token
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordEndpointsApi
     */
    public verifyToken(token: string, options?: any) {
        return PasswordEndpointsApiFp(this.configuration).verifyToken(token, options)(this.fetch, this.basePath);
    }

}
/**
 * PortalControllerApi - fetch parameter creator
 * @export
 */
export const PortalControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(options: any = {}): FetchArgs {
            const localVarPath = `/login`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PortalControllerApi - functional programming interface
 * @export
 */
export const PortalControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PortalControllerApiFetchParamCreator(configuration).login(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PortalControllerApi - factory interface
 * @export
 */
export const PortalControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(options?: any) {
            return PortalControllerApiFp(configuration).login(options)(fetch, basePath);
        },
    };
};

/**
 * PortalControllerApi - object-oriented interface
 * @export
 * @class PortalControllerApi
 * @extends {BaseAPI}
 */
export class PortalControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortalControllerApi
     */
    public login(options?: any) {
        return PortalControllerApiFp(this.configuration).login(options)(this.fetch, this.basePath);
    }

}
/**
 * ProfileEndpointsApi - fetch parameter creator
 * @export
 */
export const ProfileEndpointsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get profile
         * @param {Jwt} jwt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile(jwt: Jwt, options: any = {}): FetchArgs {
            // verify required parameter 'jwt' is not null or undefined
            if (jwt === null || jwt === undefined) {
                throw new RequiredError('jwt','Required parameter jwt was null or undefined when calling getProfile.');
            }
            const localVarPath = `/profile`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (jwt !== undefined) {
                localVarQueryParameter['jwt'] = jwt;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get profiles code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfilesCode(options: any = {}): FetchArgs {
            const localVarPath = `/profile/code`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileEndpointsApi - functional programming interface
 * @export
 */
export const ProfileEndpointsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get profile
         * @param {Jwt} jwt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile(jwt: Jwt, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {
            const localVarFetchArgs = ProfileEndpointsApiFetchParamCreator(configuration).getProfile(jwt, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get profiles code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfilesCode(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Profile>> {
            const localVarFetchArgs = ProfileEndpointsApiFetchParamCreator(configuration).getProfilesCode(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ProfileEndpointsApi - factory interface
 * @export
 */
export const ProfileEndpointsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Get profile
         * @param {Jwt} jwt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile(jwt: Jwt, options?: any) {
            return ProfileEndpointsApiFp(configuration).getProfile(jwt, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get profiles code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfilesCode(options?: any) {
            return ProfileEndpointsApiFp(configuration).getProfilesCode(options)(fetch, basePath);
        },
    };
};

/**
 * ProfileEndpointsApi - object-oriented interface
 * @export
 * @class ProfileEndpointsApi
 * @extends {BaseAPI}
 */
export class ProfileEndpointsApi extends BaseAPI {
    /**
     * 
     * @summary Get profile
     * @param {Jwt} jwt 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileEndpointsApi
     */
    public getProfile(jwt: Jwt, options?: any) {
        return ProfileEndpointsApiFp(this.configuration).getProfile(jwt, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get profiles code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileEndpointsApi
     */
    public getProfilesCode(options?: any) {
        return ProfileEndpointsApiFp(this.configuration).getProfilesCode(options)(this.fetch, this.basePath);
    }

}
/**
 * UserEndpointsApi - fetch parameter creator
 * @export
 */
export const UserEndpointsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Check if user exists
         * @param {string} [displayName] 
         * @param {string} [username] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkIfUserExists(displayName?: string, username?: string, options: any = {}): FetchArgs {
            const localVarPath = `/user/check`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (displayName !== undefined) {
                localVarQueryParameter['displayName'] = displayName;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new user
         * @param {UserDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(body: UserDTO, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createUser.');
            }
            const localVarPath = `/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UserDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generate login
         * @param {string} fullName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateLogin(fullName: string, options: any = {}): FetchArgs {
            // verify required parameter 'fullName' is not null or undefined
            if (fullName === null || fullName === undefined) {
                throw new RequiredError('fullName','Required parameter fullName was null or undefined when calling generateLogin.');
            }
            const localVarPath = `/user/generateLogin`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fullName !== undefined) {
                localVarQueryParameter['fullName'] = fullName;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers(options: any = {}): FetchArgs {
            const localVarPath = `/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Jwt} jwt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNickname(jwt: Jwt, options: any = {}): FetchArgs {
            // verify required parameter 'jwt' is not null or undefined
            if (jwt === null || jwt === undefined) {
                throw new RequiredError('jwt','Required parameter jwt was null or undefined when calling getNickname.');
            }
            const localVarPath = `/user/test`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (jwt !== undefined) {
                localVarQueryParameter['jwt'] = jwt;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user by username
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(username: string, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling getUser.');
            }
            const localVarPath = `/user/username`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get users by aircraft
         * @param {string} aircraft 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByAircraft(aircraft: string, options: any = {}): FetchArgs {
            // verify required parameter 'aircraft' is not null or undefined
            if (aircraft === null || aircraft === undefined) {
                throw new RequiredError('aircraft','Required parameter aircraft was null or undefined when calling getUsersByAircraft.');
            }
            const localVarPath = `/user/aircraft`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (aircraft !== undefined) {
                localVarQueryParameter['aircraft'] = aircraft;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get users by business company type
         * @param {string} bct 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByBCT(bct: string, options: any = {}): FetchArgs {
            // verify required parameter 'bct' is not null or undefined
            if (bct === null || bct === undefined) {
                throw new RequiredError('bct','Required parameter bct was null or undefined when calling getUsersByBCT.');
            }
            const localVarPath = `/user/bct`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bct !== undefined) {
                localVarQueryParameter['bct'] = bct;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get users by company
         * @param {string} embCompanyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByCompany(embCompanyCode: string, options: any = {}): FetchArgs {
            // verify required parameter 'embCompanyCode' is not null or undefined
            if (embCompanyCode === null || embCompanyCode === undefined) {
                throw new RequiredError('embCompanyCode','Required parameter embCompanyCode was null or undefined when calling getUsersByCompany.');
            }
            const localVarPath = `/user/company`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (embCompanyCode !== undefined) {
                localVarQueryParameter['embCompanyCode'] = embCompanyCode;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get users by market
         * @param {string} market 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByMarket(market: string, options: any = {}): FetchArgs {
            // verify required parameter 'market' is not null or undefined
            if (market === null || market === undefined) {
                throw new RequiredError('market','Required parameter market was null or undefined when calling getUsersByMarket.');
            }
            const localVarPath = `/user/market`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get users by name
         * @param {string} displayName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByName(displayName: string, options: any = {}): FetchArgs {
            // verify required parameter 'displayName' is not null or undefined
            if (displayName === null || displayName === undefined) {
                throw new RequiredError('displayName','Required parameter displayName was null or undefined when calling getUsersByName.');
            }
            const localVarPath = `/user/name`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (displayName !== undefined) {
                localVarQueryParameter['displayName'] = displayName;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get users by object
         * @param {string} [userCn] 
         * @param {string} [userDisplayName] 
         * @param {string} [userEmbStatus] 
         * @param {string} [userEmbProfile] 
         * @param {string} [userMail] 
         * @param {string} [userMail2] 
         * @param {string} [userTelephoneNumber] 
         * @param {string} [userExtensionTelephoneNumber] 
         * @param {string} [userSecondaryPhone] 
         * @param {string} [applicationDn] 
         * @param {string} [serviceDn] 
         * @param {string} [companyDisplayName] 
         * @param {string} [companyEmbStatus] 
         * @param {string} [companyAddress] 
         * @param {string} [companyCountry] 
         * @param {string} [companyLocation] 
         * @param {string} [userEmbApprovalName] 
         * @param {Date} [userEmbApprovalDate] 
         * @param {Date} [creationDate] 
         * @param {Date} [lastUpdateDate] 
         * @param {string} [bct] 
         * @param {string} [market] 
         * @param {string} [aircraftType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByObject(userCn?: string, userDisplayName?: string, userEmbStatus?: string, userEmbProfile?: string, userMail?: string, userMail2?: string, userTelephoneNumber?: string, userExtensionTelephoneNumber?: string, userSecondaryPhone?: string, applicationDn?: string, serviceDn?: string, companyDisplayName?: string, companyEmbStatus?: string, companyAddress?: string, companyCountry?: string, companyLocation?: string, userEmbApprovalName?: string, userEmbApprovalDate?: Date, creationDate?: Date, lastUpdateDate?: Date, bct?: string, market?: string, aircraftType?: string, options: any = {}): FetchArgs {
            const localVarPath = `/user/object`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userCn !== undefined) {
                localVarQueryParameter['userCn'] = userCn;
            }

            if (userDisplayName !== undefined) {
                localVarQueryParameter['userDisplayName'] = userDisplayName;
            }

            if (userEmbStatus !== undefined) {
                localVarQueryParameter['userEmbStatus'] = userEmbStatus;
            }

            if (userEmbProfile !== undefined) {
                localVarQueryParameter['userEmbProfile'] = userEmbProfile;
            }

            if (userMail !== undefined) {
                localVarQueryParameter['userMail'] = userMail;
            }

            if (userMail2 !== undefined) {
                localVarQueryParameter['userMail2'] = userMail2;
            }

            if (userTelephoneNumber !== undefined) {
                localVarQueryParameter['userTelephoneNumber'] = userTelephoneNumber;
            }

            if (userExtensionTelephoneNumber !== undefined) {
                localVarQueryParameter['userExtensionTelephoneNumber'] = userExtensionTelephoneNumber;
            }

            if (userSecondaryPhone !== undefined) {
                localVarQueryParameter['userSecondaryPhone'] = userSecondaryPhone;
            }

            if (applicationDn !== undefined) {
                localVarQueryParameter['applicationDn'] = applicationDn;
            }

            if (serviceDn !== undefined) {
                localVarQueryParameter['serviceDn'] = serviceDn;
            }

            if (companyDisplayName !== undefined) {
                localVarQueryParameter['companyDisplayName'] = companyDisplayName;
            }

            if (companyEmbStatus !== undefined) {
                localVarQueryParameter['companyEmbStatus'] = companyEmbStatus;
            }

            if (companyAddress !== undefined) {
                localVarQueryParameter['companyAddress'] = companyAddress;
            }

            if (companyCountry !== undefined) {
                localVarQueryParameter['companyCountry'] = companyCountry;
            }

            if (companyLocation !== undefined) {
                localVarQueryParameter['companyLocation'] = companyLocation;
            }

            if (userEmbApprovalName !== undefined) {
                localVarQueryParameter['userEmbApprovalName'] = userEmbApprovalName;
            }

            if (userEmbApprovalDate !== undefined) {
                localVarQueryParameter['userEmbApprovalDate'] = (userEmbApprovalDate as any).toISOString();
            }

            if (creationDate !== undefined) {
                localVarQueryParameter['creationDate'] = (creationDate as any).toISOString();
            }

            if (lastUpdateDate !== undefined) {
                localVarQueryParameter['lastUpdateDate'] = (lastUpdateDate as any).toISOString();
            }

            if (bct !== undefined) {
                localVarQueryParameter['bct'] = bct;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (aircraftType !== undefined) {
                localVarQueryParameter['aircraftType'] = aircraftType;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get users by service
         * @param {string} service 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByService(service: string, options: any = {}): FetchArgs {
            // verify required parameter 'service' is not null or undefined
            if (service === null || service === undefined) {
                throw new RequiredError('service','Required parameter service was null or undefined when calling getUsersByService.');
            }
            const localVarPath = `/user/service`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (service !== undefined) {
                localVarQueryParameter['service'] = service;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update user
         * @param {UserBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(body: UserBody, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateUser.');
            }
            const localVarPath = `/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UserBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserEndpointsApi - functional programming interface
 * @export
 */
export const UserEndpointsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Check if user exists
         * @param {string} [displayName] 
         * @param {string} [username] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkIfUserExists(displayName?: string, username?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserExists> {
            const localVarFetchArgs = UserEndpointsApiFetchParamCreator(configuration).checkIfUserExists(displayName, username, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Create new user
         * @param {UserDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(body: UserDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CreateResponse> {
            const localVarFetchArgs = UserEndpointsApiFetchParamCreator(configuration).createUser(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Generate login
         * @param {string} fullName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateLogin(fullName: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = UserEndpointsApiFetchParamCreator(configuration).generateLogin(fullName, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<User>> {
            const localVarFetchArgs = UserEndpointsApiFetchParamCreator(configuration).getAllUsers(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {Jwt} jwt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNickname(jwt: Jwt, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<{ [key: string]: any; }> {
            const localVarFetchArgs = UserEndpointsApiFetchParamCreator(configuration).getNickname(jwt, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get user by username
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {
            const localVarFetchArgs = UserEndpointsApiFetchParamCreator(configuration).getUser(username, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get users by aircraft
         * @param {string} aircraft 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByAircraft(aircraft: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<User>> {
            const localVarFetchArgs = UserEndpointsApiFetchParamCreator(configuration).getUsersByAircraft(aircraft, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get users by business company type
         * @param {string} bct 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByBCT(bct: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<User>> {
            const localVarFetchArgs = UserEndpointsApiFetchParamCreator(configuration).getUsersByBCT(bct, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get users by company
         * @param {string} embCompanyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByCompany(embCompanyCode: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<User>> {
            const localVarFetchArgs = UserEndpointsApiFetchParamCreator(configuration).getUsersByCompany(embCompanyCode, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get users by market
         * @param {string} market 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByMarket(market: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<User>> {
            const localVarFetchArgs = UserEndpointsApiFetchParamCreator(configuration).getUsersByMarket(market, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get users by name
         * @param {string} displayName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByName(displayName: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<User>> {
            const localVarFetchArgs = UserEndpointsApiFetchParamCreator(configuration).getUsersByName(displayName, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get users by object
         * @param {string} [userCn] 
         * @param {string} [userDisplayName] 
         * @param {string} [userEmbStatus] 
         * @param {string} [userEmbProfile] 
         * @param {string} [userMail] 
         * @param {string} [userMail2] 
         * @param {string} [userTelephoneNumber] 
         * @param {string} [userExtensionTelephoneNumber] 
         * @param {string} [userSecondaryPhone] 
         * @param {string} [applicationDn] 
         * @param {string} [serviceDn] 
         * @param {string} [companyDisplayName] 
         * @param {string} [companyEmbStatus] 
         * @param {string} [companyAddress] 
         * @param {string} [companyCountry] 
         * @param {string} [companyLocation] 
         * @param {string} [userEmbApprovalName] 
         * @param {Date} [userEmbApprovalDate] 
         * @param {Date} [creationDate] 
         * @param {Date} [lastUpdateDate] 
         * @param {string} [bct] 
         * @param {string} [market] 
         * @param {string} [aircraftType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByObject(userCn?: string, userDisplayName?: string, userEmbStatus?: string, userEmbProfile?: string, userMail?: string, userMail2?: string, userTelephoneNumber?: string, userExtensionTelephoneNumber?: string, userSecondaryPhone?: string, applicationDn?: string, serviceDn?: string, companyDisplayName?: string, companyEmbStatus?: string, companyAddress?: string, companyCountry?: string, companyLocation?: string, userEmbApprovalName?: string, userEmbApprovalDate?: Date, creationDate?: Date, lastUpdateDate?: Date, bct?: string, market?: string, aircraftType?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<UserObject>> {
            const localVarFetchArgs = UserEndpointsApiFetchParamCreator(configuration).getUsersByObject(userCn, userDisplayName, userEmbStatus, userEmbProfile, userMail, userMail2, userTelephoneNumber, userExtensionTelephoneNumber, userSecondaryPhone, applicationDn, serviceDn, companyDisplayName, companyEmbStatus, companyAddress, companyCountry, companyLocation, userEmbApprovalName, userEmbApprovalDate, creationDate, lastUpdateDate, bct, market, aircraftType, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get users by service
         * @param {string} service 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByService(service: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<User>> {
            const localVarFetchArgs = UserEndpointsApiFetchParamCreator(configuration).getUsersByService(service, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update user
         * @param {UserBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(body: UserBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = UserEndpointsApiFetchParamCreator(configuration).updateUser(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UserEndpointsApi - factory interface
 * @export
 */
export const UserEndpointsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Check if user exists
         * @param {string} [displayName] 
         * @param {string} [username] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkIfUserExists(displayName?: string, username?: string, options?: any) {
            return UserEndpointsApiFp(configuration).checkIfUserExists(displayName, username, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Create new user
         * @param {UserDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(body: UserDTO, options?: any) {
            return UserEndpointsApiFp(configuration).createUser(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Generate login
         * @param {string} fullName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateLogin(fullName: string, options?: any) {
            return UserEndpointsApiFp(configuration).generateLogin(fullName, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers(options?: any) {
            return UserEndpointsApiFp(configuration).getAllUsers(options)(fetch, basePath);
        },
        /**
         * 
         * @param {Jwt} jwt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNickname(jwt: Jwt, options?: any) {
            return UserEndpointsApiFp(configuration).getNickname(jwt, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get user by username
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(username: string, options?: any) {
            return UserEndpointsApiFp(configuration).getUser(username, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get users by aircraft
         * @param {string} aircraft 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByAircraft(aircraft: string, options?: any) {
            return UserEndpointsApiFp(configuration).getUsersByAircraft(aircraft, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get users by business company type
         * @param {string} bct 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByBCT(bct: string, options?: any) {
            return UserEndpointsApiFp(configuration).getUsersByBCT(bct, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get users by company
         * @param {string} embCompanyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByCompany(embCompanyCode: string, options?: any) {
            return UserEndpointsApiFp(configuration).getUsersByCompany(embCompanyCode, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get users by market
         * @param {string} market 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByMarket(market: string, options?: any) {
            return UserEndpointsApiFp(configuration).getUsersByMarket(market, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get users by name
         * @param {string} displayName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByName(displayName: string, options?: any) {
            return UserEndpointsApiFp(configuration).getUsersByName(displayName, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get users by object
         * @param {string} [userCn] 
         * @param {string} [userDisplayName] 
         * @param {string} [userEmbStatus] 
         * @param {string} [userEmbProfile] 
         * @param {string} [userMail] 
         * @param {string} [userMail2] 
         * @param {string} [userTelephoneNumber] 
         * @param {string} [userExtensionTelephoneNumber] 
         * @param {string} [userSecondaryPhone] 
         * @param {string} [applicationDn] 
         * @param {string} [serviceDn] 
         * @param {string} [companyDisplayName] 
         * @param {string} [companyEmbStatus] 
         * @param {string} [companyAddress] 
         * @param {string} [companyCountry] 
         * @param {string} [companyLocation] 
         * @param {string} [userEmbApprovalName] 
         * @param {Date} [userEmbApprovalDate] 
         * @param {Date} [creationDate] 
         * @param {Date} [lastUpdateDate] 
         * @param {string} [bct] 
         * @param {string} [market] 
         * @param {string} [aircraftType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByObject(userCn?: string, userDisplayName?: string, userEmbStatus?: string, userEmbProfile?: string, userMail?: string, userMail2?: string, userTelephoneNumber?: string, userExtensionTelephoneNumber?: string, userSecondaryPhone?: string, applicationDn?: string, serviceDn?: string, companyDisplayName?: string, companyEmbStatus?: string, companyAddress?: string, companyCountry?: string, companyLocation?: string, userEmbApprovalName?: string, userEmbApprovalDate?: Date, creationDate?: Date, lastUpdateDate?: Date, bct?: string, market?: string, aircraftType?: string, options?: any) {
            return UserEndpointsApiFp(configuration).getUsersByObject(userCn, userDisplayName, userEmbStatus, userEmbProfile, userMail, userMail2, userTelephoneNumber, userExtensionTelephoneNumber, userSecondaryPhone, applicationDn, serviceDn, companyDisplayName, companyEmbStatus, companyAddress, companyCountry, companyLocation, userEmbApprovalName, userEmbApprovalDate, creationDate, lastUpdateDate, bct, market, aircraftType, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get users by service
         * @param {string} service 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByService(service: string, options?: any) {
            return UserEndpointsApiFp(configuration).getUsersByService(service, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update user
         * @param {UserBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(body: UserBody, options?: any) {
            return UserEndpointsApiFp(configuration).updateUser(body, options)(fetch, basePath);
        },
    };
};

/**
 * UserEndpointsApi - object-oriented interface
 * @export
 * @class UserEndpointsApi
 * @extends {BaseAPI}
 */
export class UserEndpointsApi extends BaseAPI {
    /**
     * 
     * @summary Check if user exists
     * @param {string} [displayName] 
     * @param {string} [username] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserEndpointsApi
     */
    public checkIfUserExists(displayName?: string, username?: string, options?: any) {
        return UserEndpointsApiFp(this.configuration).checkIfUserExists(displayName, username, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Create new user
     * @param {UserDTO} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserEndpointsApi
     */
    public createUser(body: UserDTO, options?: any) {
        return UserEndpointsApiFp(this.configuration).createUser(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Generate login
     * @param {string} fullName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserEndpointsApi
     */
    public generateLogin(fullName: string, options?: any) {
        return UserEndpointsApiFp(this.configuration).generateLogin(fullName, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserEndpointsApi
     */
    public getAllUsers(options?: any) {
        return UserEndpointsApiFp(this.configuration).getAllUsers(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {Jwt} jwt 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserEndpointsApi
     */
    public getNickname(jwt: Jwt, options?: any) {
        return UserEndpointsApiFp(this.configuration).getNickname(jwt, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get user by username
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserEndpointsApi
     */
    public getUser(username: string, options?: any) {
        return UserEndpointsApiFp(this.configuration).getUser(username, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get users by aircraft
     * @param {string} aircraft 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserEndpointsApi
     */
    public getUsersByAircraft(aircraft: string, options?: any) {
        return UserEndpointsApiFp(this.configuration).getUsersByAircraft(aircraft, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get users by business company type
     * @param {string} bct 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserEndpointsApi
     */
    public getUsersByBCT(bct: string, options?: any) {
        return UserEndpointsApiFp(this.configuration).getUsersByBCT(bct, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get users by company
     * @param {string} embCompanyCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserEndpointsApi
     */
    public getUsersByCompany(embCompanyCode: string, options?: any) {
        return UserEndpointsApiFp(this.configuration).getUsersByCompany(embCompanyCode, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get users by market
     * @param {string} market 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserEndpointsApi
     */
    public getUsersByMarket(market: string, options?: any) {
        return UserEndpointsApiFp(this.configuration).getUsersByMarket(market, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get users by name
     * @param {string} displayName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserEndpointsApi
     */
    public getUsersByName(displayName: string, options?: any) {
        return UserEndpointsApiFp(this.configuration).getUsersByName(displayName, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get users by object
     * @param {string} [userCn] 
     * @param {string} [userDisplayName] 
     * @param {string} [userEmbStatus] 
     * @param {string} [userEmbProfile] 
     * @param {string} [userMail] 
     * @param {string} [userMail2] 
     * @param {string} [userTelephoneNumber] 
     * @param {string} [userExtensionTelephoneNumber] 
     * @param {string} [userSecondaryPhone] 
     * @param {string} [applicationDn] 
     * @param {string} [serviceDn] 
     * @param {string} [companyDisplayName] 
     * @param {string} [companyEmbStatus] 
     * @param {string} [companyAddress] 
     * @param {string} [companyCountry] 
     * @param {string} [companyLocation] 
     * @param {string} [userEmbApprovalName] 
     * @param {Date} [userEmbApprovalDate] 
     * @param {Date} [creationDate] 
     * @param {Date} [lastUpdateDate] 
     * @param {string} [bct] 
     * @param {string} [market] 
     * @param {string} [aircraftType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserEndpointsApi
     */
    public getUsersByObject(userCn?: string, userDisplayName?: string, userEmbStatus?: string, userEmbProfile?: string, userMail?: string, userMail2?: string, userTelephoneNumber?: string, userExtensionTelephoneNumber?: string, userSecondaryPhone?: string, applicationDn?: string, serviceDn?: string, companyDisplayName?: string, companyEmbStatus?: string, companyAddress?: string, companyCountry?: string, companyLocation?: string, userEmbApprovalName?: string, userEmbApprovalDate?: Date, creationDate?: Date, lastUpdateDate?: Date, bct?: string, market?: string, aircraftType?: string, options?: any) {
        return UserEndpointsApiFp(this.configuration).getUsersByObject(userCn, userDisplayName, userEmbStatus, userEmbProfile, userMail, userMail2, userTelephoneNumber, userExtensionTelephoneNumber, userSecondaryPhone, applicationDn, serviceDn, companyDisplayName, companyEmbStatus, companyAddress, companyCountry, companyLocation, userEmbApprovalName, userEmbApprovalDate, creationDate, lastUpdateDate, bct, market, aircraftType, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get users by service
     * @param {string} service 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserEndpointsApi
     */
    public getUsersByService(service: string, options?: any) {
        return UserEndpointsApiFp(this.configuration).getUsersByService(service, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update user
     * @param {UserBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserEndpointsApi
     */
    public updateUser(body: UserBody, options?: any) {
        return UserEndpointsApiFp(this.configuration).updateUser(body, options)(this.fetch, this.basePath);
    }

}
/**
 * WorkflowEndpointsApi - fetch parameter creator
 * @export
 */
export const WorkflowEndpointsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create workflow
         * @param {WorkflowPayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkflow(body: WorkflowPayload, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createWorkflow.');
            }
            const localVarPath = `/workflow`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"WorkflowPayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Finish task - approve or reject
         * @param {WorkflowTaskBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finishTask(body: WorkflowTaskBody, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling finishTask.');
            }
            const localVarPath = `/workflow/task`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"WorkflowTaskBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List tasks from workflow
         * @param {number} workflowId 
         * @param {string} applicationDn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTasks(workflowId: number, applicationDn: string, options: any = {}): FetchArgs {
            // verify required parameter 'workflowId' is not null or undefined
            if (workflowId === null || workflowId === undefined) {
                throw new RequiredError('workflowId','Required parameter workflowId was null or undefined when calling getTasks.');
            }
            // verify required parameter 'applicationDn' is not null or undefined
            if (applicationDn === null || applicationDn === undefined) {
                throw new RequiredError('applicationDn','Required parameter applicationDn was null or undefined when calling getTasks.');
            }
            const localVarPath = `/workflow/task/{workflowId}`
                .replace(`{${"workflowId"}}`, encodeURIComponent(String(workflowId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (applicationDn !== undefined) {
                localVarQueryParameter['applicationDn'] = applicationDn;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List workflows
         * @param {Pageable} pageable 
         * @param {string} [companyName] 
         * @param {string} [companyAdminName] 
         * @param {string} [applicationName] 
         * @param {string} [username] 
         * @param {string} [statusTask] 
         * @param {string} [statusWorkflow] 
         * @param {Date} [startTask] 
         * @param {Date} [endTask] 
         * @param {Date} [startWorkflow] 
         * @param {Date} [endWorkflow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflows(pageable: Pageable, companyName?: string, companyAdminName?: string, applicationName?: string, username?: string, statusTask?: string, statusWorkflow?: string, startTask?: Date, endTask?: Date, startWorkflow?: Date, endWorkflow?: Date, options: any = {}): FetchArgs {
            // verify required parameter 'pageable' is not null or undefined
            if (pageable === null || pageable === undefined) {
                throw new RequiredError('pageable','Required parameter pageable was null or undefined when calling getWorkflows.');
            }
            const localVarPath = `/workflow`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (companyName !== undefined) {
                localVarQueryParameter['companyName'] = companyName;
            }

            if (companyAdminName !== undefined) {
                localVarQueryParameter['companyAdminName'] = companyAdminName;
            }

            if (applicationName !== undefined) {
                localVarQueryParameter['applicationName'] = applicationName;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (statusTask !== undefined) {
                localVarQueryParameter['statusTask'] = statusTask;
            }

            if (statusWorkflow !== undefined) {
                localVarQueryParameter['statusWorkflow'] = statusWorkflow;
            }

            if (startTask !== undefined) {
                localVarQueryParameter['startTask'] = (startTask as any).toISOString();
            }

            if (endTask !== undefined) {
                localVarQueryParameter['endTask'] = (endTask as any).toISOString();
            }

            if (startWorkflow !== undefined) {
                localVarQueryParameter['startWorkflow'] = (startWorkflow as any).toISOString();
            }

            if (endWorkflow !== undefined) {
                localVarQueryParameter['endWorkflow'] = (endWorkflow as any).toISOString();
            }

            if (pageable !== undefined) {
                localVarQueryParameter['pageable'] = pageable;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkflowEndpointsApi - functional programming interface
 * @export
 */
export const WorkflowEndpointsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create workflow
         * @param {WorkflowPayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkflow(body: WorkflowPayload, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<WorkflowProcess> {
            const localVarFetchArgs = WorkflowEndpointsApiFetchParamCreator(configuration).createWorkflow(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Finish task - approve or reject
         * @param {WorkflowTaskBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finishTask(body: WorkflowTaskBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<WorkflowTask> {
            const localVarFetchArgs = WorkflowEndpointsApiFetchParamCreator(configuration).finishTask(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List tasks from workflow
         * @param {number} workflowId 
         * @param {string} applicationDn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTasks(workflowId: number, applicationDn: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<WorkflowTaskDTO> {
            const localVarFetchArgs = WorkflowEndpointsApiFetchParamCreator(configuration).getTasks(workflowId, applicationDn, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List workflows
         * @param {Pageable} pageable 
         * @param {string} [companyName] 
         * @param {string} [companyAdminName] 
         * @param {string} [applicationName] 
         * @param {string} [username] 
         * @param {string} [statusTask] 
         * @param {string} [statusWorkflow] 
         * @param {Date} [startTask] 
         * @param {Date} [endTask] 
         * @param {Date} [startWorkflow] 
         * @param {Date} [endWorkflow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflows(pageable: Pageable, companyName?: string, companyAdminName?: string, applicationName?: string, username?: string, statusTask?: string, statusWorkflow?: string, startTask?: Date, endTask?: Date, startWorkflow?: Date, endWorkflow?: Date, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PageWorkflowDTO> {
            const localVarFetchArgs = WorkflowEndpointsApiFetchParamCreator(configuration).getWorkflows(pageable, companyName, companyAdminName, applicationName, username, statusTask, statusWorkflow, startTask, endTask, startWorkflow, endWorkflow, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * WorkflowEndpointsApi - factory interface
 * @export
 */
export const WorkflowEndpointsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create workflow
         * @param {WorkflowPayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkflow(body: WorkflowPayload, options?: any) {
            return WorkflowEndpointsApiFp(configuration).createWorkflow(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Finish task - approve or reject
         * @param {WorkflowTaskBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finishTask(body: WorkflowTaskBody, options?: any) {
            return WorkflowEndpointsApiFp(configuration).finishTask(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List tasks from workflow
         * @param {number} workflowId 
         * @param {string} applicationDn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTasks(workflowId: number, applicationDn: string, options?: any) {
            return WorkflowEndpointsApiFp(configuration).getTasks(workflowId, applicationDn, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List workflows
         * @param {Pageable} pageable 
         * @param {string} [companyName] 
         * @param {string} [companyAdminName] 
         * @param {string} [applicationName] 
         * @param {string} [username] 
         * @param {string} [statusTask] 
         * @param {string} [statusWorkflow] 
         * @param {Date} [startTask] 
         * @param {Date} [endTask] 
         * @param {Date} [startWorkflow] 
         * @param {Date} [endWorkflow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflows(pageable: Pageable, companyName?: string, companyAdminName?: string, applicationName?: string, username?: string, statusTask?: string, statusWorkflow?: string, startTask?: Date, endTask?: Date, startWorkflow?: Date, endWorkflow?: Date, options?: any) {
            return WorkflowEndpointsApiFp(configuration).getWorkflows(pageable, companyName, companyAdminName, applicationName, username, statusTask, statusWorkflow, startTask, endTask, startWorkflow, endWorkflow, options)(fetch, basePath);
        },
    };
};

/**
 * WorkflowEndpointsApi - object-oriented interface
 * @export
 * @class WorkflowEndpointsApi
 * @extends {BaseAPI}
 */
export class WorkflowEndpointsApi extends BaseAPI {
    /**
     * 
     * @summary Create workflow
     * @param {WorkflowPayload} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowEndpointsApi
     */
    public createWorkflow(body: WorkflowPayload, options?: any) {
        return WorkflowEndpointsApiFp(this.configuration).createWorkflow(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Finish task - approve or reject
     * @param {WorkflowTaskBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowEndpointsApi
     */
    public finishTask(body: WorkflowTaskBody, options?: any) {
        return WorkflowEndpointsApiFp(this.configuration).finishTask(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List tasks from workflow
     * @param {number} workflowId 
     * @param {string} applicationDn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowEndpointsApi
     */
    public getTasks(workflowId: number, applicationDn: string, options?: any) {
        return WorkflowEndpointsApiFp(this.configuration).getTasks(workflowId, applicationDn, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List workflows
     * @param {Pageable} pageable 
     * @param {string} [companyName] 
     * @param {string} [companyAdminName] 
     * @param {string} [applicationName] 
     * @param {string} [username] 
     * @param {string} [statusTask] 
     * @param {string} [statusWorkflow] 
     * @param {Date} [startTask] 
     * @param {Date} [endTask] 
     * @param {Date} [startWorkflow] 
     * @param {Date} [endWorkflow] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowEndpointsApi
     */
    public getWorkflows(pageable: Pageable, companyName?: string, companyAdminName?: string, applicationName?: string, username?: string, statusTask?: string, statusWorkflow?: string, startTask?: Date, endTask?: Date, startWorkflow?: Date, endWorkflow?: Date, options?: any) {
        return WorkflowEndpointsApiFp(this.configuration).getWorkflows(pageable, companyName, companyAdminName, applicationName, username, statusTask, statusWorkflow, startTask, endTask, startWorkflow, endWorkflow, options)(this.fetch, this.basePath);
    }

}
